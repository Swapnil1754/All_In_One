{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  constructor(login, router, reCaptch, authService, sanitizer, fb) {\n    this.login = login;\n    this.router = router;\n    this.reCaptch = reCaptch;\n    this.authService = authService;\n    this.sanitizer = sanitizer;\n    this.fb = fb;\n    this.authenticationError = false;\n    this.handleGoogleSignIn = response => {\n      if (response.credential) {\n        const toke = response.credential;\n        this.googleToken(toke);\n      } else {\n        console.error('Google Sign In Failed...!!!');\n      }\n    };\n    this.siteKey = \"6Le3ZxUnAAAAAFVw98Yr6h6vPbt2NLrcUbhQAHQf\";\n    this.loginForm = new FormGroup({\n      userId: new FormControl('', {\n        nonNullable: true,\n        validators: [Validators.required]\n      }),\n      password: new FormControl('', {\n        nonNullable: true,\n        validators: [Validators.required]\n      }),\n      rememberMe: new FormControl(false, {\n        nonNullable: true,\n        validators: [Validators.required]\n      }),\n      recaptcha: new FormControl(['', Validators.required])\n    });\n    FB.getLoginStatus(function (response) {\n      console.log(response.authResponse);\n    });\n  }\n  ngOnInit() {\n    this.login.identity().subscribe(() => {\n      if (this.login.isAuthenticated()) {\n        this.router.navigate(['']);\n      }\n    });\n    google.accounts.id.initialize({\n      client_id: '578349732074-ddo6roou2d4o05trh2ajmevnngudc39n.apps.googleusercontent.com',\n      callback: this.handleGoogleSignIn\n    });\n  }\n  ngAfterViewInit() {\n    // this.userId.nativeElement.focus();\n  }\n  loginFun() {\n    const data = this.loginForm.value;\n    const pass = this.loginForm.get('password')?.value;\n    const remember = this.loginForm.getRawValue();\n    console.log(\"Password\", pass);\n    var formData = new FormData();\n    formData.append(\"password\", JSON.stringify(pass));\n    if (data.userId != '' && data.password != '') {\n      this.login.login(data.userId, formData, remember).subscribe({\n        next: () => {\n          this.authenticationError = false;\n          if (!this.router.getCurrentNavigation()) {\n            // There were no routing during login (eg from navigationToStoredUrl)\n            this.router.navigate(['']);\n          }\n        },\n        error: () => this.authenticationError = true\n      });\n    }\n  }\n  // loginWithFb() {\n  //   FB.login((response: any) => {\n  //     if(response.authResponse) {\n  //       const fbTok = response.authResponse.signedRequest;\n  //       // this.googleToken(fbTok);\n  //       const decode1 = jwt_decode(fbTok);\n  //       console.log(\"Decoded\", response);\n  //     }\n  //   })\n  // }\n  loginWithGoogle() {\n    google.accounts.id.prompt();\n  }\n  googleToken(gToken) {\n    const remember = this.loginForm.getRawValue();\n    this.login.googleLogin(gToken, remember).subscribe(x => {\n      this.login.authenticateUser(gToken, remember);\n      this.login.identity(x?.userId, remember);\n    });\n    this.authenticationError = false;\n    if (!this.router.getCurrentNavigation()) {\n      this.router.navigate(['']);\n    }\n  }\n  getPlainText(v1) {\n    const x = this.sanitizer.bypassSecurityTrustHtml(v1);\n    return x;\n  }\n  logout() {\n    this.login.logout();\n  }\n};\n__decorate([ViewChild('userId', {\n  static: false\n})], LoginComponent.prototype, \"userId\", void 0);\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","ViewChild","FormControl","FormGroup","Validators","LoginComponent","constructor","login","router","reCaptch","authService","sanitizer","fb","authenticationError","handleGoogleSignIn","response","credential","toke","googleToken","console","error","siteKey","loginForm","userId","nonNullable","validators","required","password","rememberMe","recaptcha","FB","getLoginStatus","log","authResponse","ngOnInit","identity","subscribe","isAuthenticated","navigate","google","accounts","id","initialize","client_id","callback","ngAfterViewInit","loginFun","data","value","pass","get","remember","getRawValue","formData","FormData","append","JSON","stringify","next","getCurrentNavigation","loginWithGoogle","prompt","gToken","googleLogin","x","authenticateUser","getPlainText","v1","bypassSecurityTrustHtml","logout","__decorate","static","selector","templateUrl","styleUrls"],"sources":["C:\\MMY Project\\MakeMyYatraa\\Frontend\\Data0\\src\\app\\Register\\login\\login.component.ts"],"sourcesContent":["import { AfterViewInit, Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { LoginServiceService } from '../../Services/login-service.service';\nimport { Router } from '@angular/router';\nimport { ReCaptchaV3Service } from 'ngx-captcha';\nimport { GoogleLoginProvider, SocialAuthService, SocialUser } from 'angularx-social-login';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport  jwt  from 'jsonwebtoken';\nimport jwt_decode from 'jwt-decode';\ndeclare const FB: any;\ndeclare const google: any;\ntype JwtToken={\n  token:string;\n}\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit, AfterViewInit {\n  @ViewChild('userId', { static: false })\n  userId!: ElementRef;\n  loginForm:FormGroup;\n  authenticationError: boolean=false;\n  constructor(private login:LoginServiceService, private router: Router, private reCaptch: ReCaptchaV3Service, private authService: SocialAuthService, private sanitizer: DomSanitizer, private fb: Faceb){\n    this.loginForm = new FormGroup({\n      userId: new FormControl('',{ nonNullable: true, validators: [Validators.required]}),\n      password: new FormControl('',{ nonNullable: true, validators: [Validators.required]}),\n      rememberMe: new FormControl(false,{ nonNullable: true, validators: [Validators.required]}),\n      recaptcha: new FormControl(['', Validators.required])\n    });\n    FB.getLoginStatus(function(response: any) {\n      console.log(response.authResponse);\n    });\n  }\n  ngOnInit(): void{\n    this.login.identity().subscribe(() => {\n      if(this.login.isAuthenticated()) {\n        this.router.navigate(['']);\n      }\n    });\n    google.accounts.id.initialize({\n      client_id: '578349732074-ddo6roou2d4o05trh2ajmevnngudc39n.apps.googleusercontent.com',\n      callback:\n      this.handleGoogleSignIn\n    });\n  }\n  ngAfterViewInit(): void {\n    // this.userId.nativeElement.focus();\n  }\n  loginFun(){\n   const data=this.loginForm.value;\n   const pass = this.loginForm.get('password')?.value;\n   const remember = this.loginForm.getRawValue();\n    console.log(\"Password\",pass);\n   var formData = new FormData();\n   formData.append(\"password\", JSON.stringify(pass));\n   if(data.userId!='' && data.password!=''){\n   \n    this.login.login(data.userId,formData,remember).subscribe(\n      {\n        next: () => {\n          this.authenticationError = false;\n          if (!this.router.getCurrentNavigation()) {\n            // There were no routing during login (eg from navigationToStoredUrl)\n            this.router.navigate(['']);\n          }\n        },\n        error: () => (this.authenticationError = true),\n      }\n    )  \n   }\n  }\n  // loginWithFb() {\n  //   FB.login((response: any) => {\n  //     if(response.authResponse) {\n  //       const fbTok = response.authResponse.signedRequest;\n  //       // this.googleToken(fbTok);\n  //       const decode1 = jwt_decode(fbTok);\n  //       console.log(\"Decoded\", response);\n  //     }\n  //   })\n  // }\n\n  loginWithGoogle() {\n    google.accounts.id.prompt();\n  }\n  handleGoogleSignIn = (response: any) => {\n    if(response.credential) {\n      const toke = response.credential;\n      this.googleToken(toke);\n    }else{\n      console.error('Google Sign In Failed...!!!')\n    }\n  }\n  googleToken(gToken: string) {\n    const remember = this.loginForm.getRawValue();\n    this.login.googleLogin(gToken, remember).subscribe(x =>{\n      this.login.authenticateUser(gToken, remember);\n      this.login.identity(x?.userId, remember);\n    });\n        this.authenticationError = false;\n        if(!this.router.getCurrentNavigation()) {\n          this.router.navigate(['']);\n        }\n  }\n  getPlainText(v1: string):SafeHtml{\n    const x = this.sanitizer.bypassSecurityTrustHtml(v1);\n    return x;\n  }\n  logout() {\n    this.login.logout();\n  }\n  siteKey: string=\"6Le3ZxUnAAAAAFVw98Yr6h6vPbt2NLrcUbhQAHQf\";\n  \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}