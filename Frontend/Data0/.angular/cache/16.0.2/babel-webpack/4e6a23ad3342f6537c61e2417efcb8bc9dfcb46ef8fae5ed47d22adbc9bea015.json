{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs';\nlet LoginServiceService = class LoginServiceService {\n  constructor(httpclient, localStorage, sessionStorage) {\n    this.httpclient = httpclient;\n    this.localStorage = localStorage;\n    this.sessionStorage = sessionStorage;\n    this.url = \"http://localhost:9000/api/v1/login\";\n    this.url1 = \"http://localhost:9000/api/v1\";\n  }\n  register(data) {\n    return this.httpclient.post(`${this.url1}/${\"register\"}`, data);\n  }\n  login(data, pass, remember) {\n    return this.httpclient.post(`${this.url}/${data}`, pass).pipe(map(response => this.authenticateUser(response, remember.rememberMe)));\n  }\n  authenticateUser(response, rememberMe) {\n    const jwt = response.token;\n    if (rememberMe) {}\n  }\n};\nLoginServiceService = __decorate([Injectable({\n  providedIn: 'root'\n})], LoginServiceService);\nexport { LoginServiceService };","map":{"version":3,"names":["Injectable","map","LoginServiceService","constructor","httpclient","localStorage","sessionStorage","url","url1","register","data","post","login","pass","remember","pipe","response","authenticateUser","rememberMe","jwt","token","__decorate","providedIn"],"sources":["C:\\MMY Project\\MakeMyYatraa\\Frontend\\data0\\src\\app\\Services\\login-service.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, map } from 'rxjs';\nimport { Reg } from '../Domain/General-Domain/Reg';\nimport { Login } from '../Domain/General-Domain/Login';\nimport { LocalStorageService, SessionStorageService } from '';\ntype JwtToken={\n  token:string;\n}\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginServiceService {\n  constructor(\n    private httpclient:HttpClient,\n    private localStorage: LocalStorageService,\n    private sessionStorage: SessionStorageService\n    ) { }\n  url=\"http://localhost:9000/api/v1/login\";\n  url1=\"http://localhost:9000/api/v1\";\n  register(data:Reg):Observable<Reg>{\n    return this.httpclient.post<Reg>(`${this.url1}/${\"register\"}`,data);\n  }\n  login(data:number,pass:FormData,remember:Login):Observable<void>{\n    return this.httpclient.post<any>(`${this.url}/${data}`,pass).\n    pipe(map(response => this.authenticateUser(response, remember.rememberMe)));\n  }\n  private authenticateUser(response: JwtToken, rememberMe: boolean):void {\n    const jwt = response.token;\n    if(rememberMe) {\n\n    }\n  }\n}\n"],"mappings":";AACA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAAqBC,GAAG,QAAQ,MAAM;AAUtC,IAAaC,mBAAmB,GAAhC,MAAaA,mBAAmB;EAC9BC,YACUC,UAAqB,EACrBC,YAAiC,EACjCC,cAAqC;IAFrC,KAAAF,UAAU,GAAVA,UAAU;IACV,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,cAAc,GAAdA,cAAc;IAExB,KAAAC,GAAG,GAAC,oCAAoC;IACxC,KAAAC,IAAI,GAAC,8BAA8B;EAF7B;EAGNC,QAAQA,CAACC,IAAQ;IACf,OAAO,IAAI,CAACN,UAAU,CAACO,IAAI,CAAM,GAAG,IAAI,CAACH,IAAI,IAAI,UAAU,EAAE,EAACE,IAAI,CAAC;EACrE;EACAE,KAAKA,CAACF,IAAW,EAACG,IAAa,EAACC,QAAc;IAC5C,OAAO,IAAI,CAACV,UAAU,CAACO,IAAI,CAAM,GAAG,IAAI,CAACJ,GAAG,IAAIG,IAAI,EAAE,EAACG,IAAI,CAAC,CAC5DE,IAAI,CAACd,GAAG,CAACe,QAAQ,IAAI,IAAI,CAACC,gBAAgB,CAACD,QAAQ,EAAEF,QAAQ,CAACI,UAAU,CAAC,CAAC,CAAC;EAC7E;EACQD,gBAAgBA,CAACD,QAAkB,EAAEE,UAAmB;IAC9D,MAAMC,GAAG,GAAGH,QAAQ,CAACI,KAAK;IAC1B,IAAGF,UAAU,EAAE,C;EAGjB;CACD;AArBYhB,mBAAmB,GAAAmB,UAAA,EAH/BrB,UAAU,CAAC;EACVsB,UAAU,EAAE;CACb,CAAC,C,EACWpB,mBAAmB,CAqB/B;SArBYA,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}