{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  constructor(login, router) {\n    this.login = login;\n    this.router = router;\n    this.authenticationError = false;\n    this.loginForm = new FormGroup({\n      userId: new FormControl('', {\n        nonNullable: true,\n        validators: [Validators.required]\n      }),\n      password: new FormControl('', {\n        nonNullable: true,\n        validators: [Validators.required]\n      }),\n      rememberMe: new FormControl(false, {\n        nonNullable: true,\n        validators: [Validators.required]\n      })\n    });\n  }\n  ngOnInit() {\n    this.login.identity().subscribe(() => {\n      if (this.login.isAuthenticated()) {\n        this.router.navigate(['']);\n      }\n    });\n  }\n  loginFun() {\n    const data = this.loginForm.value;\n    const pass = this.loginForm.get('password')?.value;\n    const remember = this.loginForm.getRawValue();\n    console.log(\"Password\", pass);\n    var formData = new FormData();\n    formData.append(\"password\", JSON.stringify(pass));\n    if (data.userId != '' && data.password != '') {\n      this.login.login(data.userId, formData, remember).subscribe({\n        next: () => {\n          this.authenticationError = false;\n          if (!this.router.getCurrentNavigation()) {\n            // There were no routing during login (eg from navigationToStoredUrl)\n            this.router.navigate(['']);\n          }\n        },\n        error: () => this.authenticationError = true\n      });\n    }\n  }\n  logout() {\n    this.login.logout();\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","FormControl","FormGroup","Validators","LoginComponent","constructor","login","router","authenticationError","loginForm","userId","nonNullable","validators","required","password","rememberMe","ngOnInit","identity","subscribe","isAuthenticated","navigate","loginFun","data","value","pass","get","remember","getRawValue","console","log","formData","FormData","append","JSON","stringify","next","getCurrentNavigation","error","logout","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\MMY Project\\MakeMyYatraa\\Frontend\\data0\\src\\app\\Register\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { LoginServiceService } from '../../Services/login-service.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  loginForm:FormGroup;\n  authenticationError: boolean=false;\n  constructor(private login:LoginServiceService, private router: Router){\n    this.loginForm = new FormGroup({\n      userId: new FormControl('',{ nonNullable: true, validators: [Validators.required]}),\n      password: new FormControl('',{ nonNullable: true, validators: [Validators.required]}),\n      rememberMe: new FormControl(false,{ nonNullable: true, validators: [Validators.required]})\n    })\n  }\n  ngOnInit(): void{\n    this.login.identity().subscribe(() => {\n      if(this.login.isAuthenticated()) {\n        this.router.navigate(['']);\n      }\n    })\n  }\n  loginFun(){\n   const data=this.loginForm.value;\n   const pass = this.loginForm.get('password')?.value;\n   const remember = this.loginForm.getRawValue();\n    console.log(\"Password\",pass);\n   var formData = new FormData();\n   formData.append(\"password\", JSON.stringify(pass));\n   if(data.userId!='' && data.password!=''){\n   \n    this.login.login(data.userId,formData,remember).subscribe(\n      {\n        next: () => {\n          this.authenticationError = false;\n          if (!this.router.getCurrentNavigation()) {\n            // There were no routing during login (eg from navigationToStoredUrl)\n            this.router.navigate(['']);\n          }\n        },\n        error: () => (this.authenticationError = true),\n      }\n    )  \n   }\n  }\n  logout() {\n    this.login.logout();\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AASnE,IAAaC,cAAc,GAA3B,MAAaA,cAAc;EAGzBC,YAAoBC,KAAyB,EAAUC,MAAc;IAAjD,KAAAD,KAAK,GAALA,KAAK;IAA8B,KAAAC,MAAM,GAANA,MAAM;IAD7D,KAAAC,mBAAmB,GAAU,KAAK;IAEhC,IAAI,CAACC,SAAS,GAAG,IAAIP,SAAS,CAAC;MAC7BQ,MAAM,EAAE,IAAIT,WAAW,CAAC,EAAE,EAAC;QAAEU,WAAW,EAAE,IAAI;QAAEC,UAAU,EAAE,CAACT,UAAU,CAACU,QAAQ;MAAC,CAAC,CAAC;MACnFC,QAAQ,EAAE,IAAIb,WAAW,CAAC,EAAE,EAAC;QAAEU,WAAW,EAAE,IAAI;QAAEC,UAAU,EAAE,CAACT,UAAU,CAACU,QAAQ;MAAC,CAAC,CAAC;MACrFE,UAAU,EAAE,IAAId,WAAW,CAAC,KAAK,EAAC;QAAEU,WAAW,EAAE,IAAI;QAAEC,UAAU,EAAE,CAACT,UAAU,CAACU,QAAQ;MAAC,CAAC;KAC1F,CAAC;EACJ;EACAG,QAAQA,CAAA;IACN,IAAI,CAACV,KAAK,CAACW,QAAQ,EAAE,CAACC,SAAS,CAAC,MAAK;MACnC,IAAG,IAAI,CAACZ,KAAK,CAACa,eAAe,EAAE,EAAE;QAC/B,IAAI,CAACZ,MAAM,CAACa,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;;IAE9B,CAAC,CAAC;EACJ;EACAC,QAAQA,CAAA;IACP,MAAMC,IAAI,GAAC,IAAI,CAACb,SAAS,CAACc,KAAK;IAC/B,MAAMC,IAAI,GAAG,IAAI,CAACf,SAAS,CAACgB,GAAG,CAAC,UAAU,CAAC,EAAEF,KAAK;IAClD,MAAMG,QAAQ,GAAG,IAAI,CAACjB,SAAS,CAACkB,WAAW,EAAE;IAC5CC,OAAO,CAACC,GAAG,CAAC,UAAU,EAACL,IAAI,CAAC;IAC7B,IAAIM,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC7BD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACV,IAAI,CAAC,CAAC;IACjD,IAAGF,IAAI,CAACZ,MAAM,IAAE,EAAE,IAAIY,IAAI,CAACR,QAAQ,IAAE,EAAE,EAAC;MAEvC,IAAI,CAACR,KAAK,CAACA,KAAK,CAACgB,IAAI,CAACZ,MAAM,EAACoB,QAAQ,EAACJ,QAAQ,CAAC,CAACR,SAAS,CACvD;QACEiB,IAAI,EAAEA,CAAA,KAAK;UACT,IAAI,CAAC3B,mBAAmB,GAAG,KAAK;UAChC,IAAI,CAAC,IAAI,CAACD,MAAM,CAAC6B,oBAAoB,EAAE,EAAE;YACvC;YACA,IAAI,CAAC7B,MAAM,CAACa,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;;QAE9B,CAAC;QACDiB,KAAK,EAAEA,CAAA,KAAO,IAAI,CAAC7B,mBAAmB,GAAG;OAC1C,CACF;;EAEH;EACA8B,MAAMA,CAAA;IACJ,IAAI,CAAChC,KAAK,CAACgC,MAAM,EAAE;EACrB;CACD;AA3CYlC,cAAc,GAAAmC,UAAA,EAL1BvC,SAAS,CAAC;EACTwC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWtC,cAAc,CA2C1B;SA3CYA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}