import { BaseLoginProvider } from '../entities/base-login-provider';
import { SocialUser } from '../entities/social-user';
export class GoogleLoginProvider extends BaseLoginProvider {
    constructor(clientId, initOptions = { scope: 'email' }) {
        super();
        this.clientId = clientId;
        this.initOptions = initOptions;
    }
    initialize() {
        return new Promise((resolve, reject) => {
            try {
                this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://apis.google.com/js/api.js', () => {
                    gapi.load('client:auth2', () => {
                        gapi.client.init(Object.assign(Object.assign({}, this.initOptions), { client_id: this.clientId }))
                            .then(() => {
                            this.auth2 = gapi.auth2.getAuthInstance();
                            resolve();
                        })
                            .catch((err) => {
                            reject(err);
                        });
                    });
                });
            }
            catch (err) {
                reject(err);
            }
        });
    }
    getLoginStatus(loginStatusOptions) {
        const options = Object.assign(Object.assign({}, this.initOptions), loginStatusOptions);
        return new Promise((resolve, reject) => {
            if (this.auth2.isSignedIn.get()) {
                const user = new SocialUser();
                const profile = this.auth2.currentUser.get().getBasicProfile();
                const authResponse = this.auth2.currentUser.get().getAuthResponse(true); // get complete authResponse object
                this.setUserProfile(user, profile);
                user.response = authResponse;
                const resolveUser = authenticationResponse => {
                    user.authToken = authenticationResponse.access_token;
                    user.idToken = authenticationResponse.id_token;
                    resolve(user);
                };
                if (options.refreshToken) {
                    this.auth2.currentUser.get().reloadAuthResponse().then(resolveUser);
                }
                else {
                    resolveUser(authResponse);
                }
            }
            else {
                reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);
            }
        });
    }
    signIn(signInOptions) {
        const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);
        return new Promise((resolve, reject) => {
            const offlineAccess = options && options.offline_access;
            const promise = !offlineAccess
                ? this.auth2.signIn(signInOptions)
                : this.auth2.grantOfflineAccess(signInOptions);
            promise
                .then((response) => {
                const user = new SocialUser();
                if (response && response.code) {
                    user.authorizationCode = response.code;
                }
                else {
                    const profile = this.auth2.currentUser.get().getBasicProfile();
                    const authResponse = this.auth2.currentUser.get().getAuthResponse(true);
                    const token = authResponse.access_token;
                    const backendToken = authResponse.id_token;
                    this.setUserProfile(user, profile);
                    user.authToken = token;
                    user.idToken = backendToken;
                    user.response = authResponse;
                }
                resolve(user);
            }, (closed) => {
                reject(closed);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    signOut(revoke) {
        return new Promise((resolve, reject) => {
            let signOutPromise;
            if (revoke) {
                signOutPromise = this.auth2.disconnect();
            }
            else {
                signOutPromise = this.auth2.signOut();
            }
            signOutPromise
                .then((err) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    setUserProfile(user, profile) {
        user.id = profile.getId();
        user.name = profile.getName();
        user.email = profile.getEmail();
        user.photoUrl = profile.getImageUrl();
        user.firstName = profile.getGivenName();
        user.lastName = profile.getFamilyName();
    }
}
GoogleLoginProvider.PROVIDER_ID = 'GOOGLE';
//# sourceMappingURL=data:application/json;base64,