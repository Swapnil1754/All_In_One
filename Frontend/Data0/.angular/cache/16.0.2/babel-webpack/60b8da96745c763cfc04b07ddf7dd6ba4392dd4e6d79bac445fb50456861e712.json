{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { EMAIL_ALREADY_USED_TYPE, LOGIN_ALREADY_USED_TYPE } from '../../Configuration/error.Constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../Services/login-service.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/toolbar\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/radio\";\nimport * as i9 from \"../Password/password-strength/password-strength.component\";\nfunction RegistrationComponent_mat_error_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Name is Mandatory...!!!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationComponent_mat_error_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Invalid Mobile Number...!!!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationComponent_mat_error_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Email is Mandatory...!!!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationComponent_mat_error_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Invalid Email Format...!!!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationComponent_mat_error_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Password is Mandatory...!!!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationComponent_mat_error_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Invalid Password...!!!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationComponent_mat_error_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Password is too Short...!!!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationComponent_mat_error_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Password is too Large...!!!\");\n    i0.ɵɵelementEnd();\n  }\n}\nclass RegistrationComponent {\n  constructor(loginService) {\n    this.loginService = loginService;\n    this.noMatch = false;\n    this.error = false;\n    this.errorEmailExists = false;\n    this.errorUserExists = false;\n    this.success = false;\n    this.RegisterForm = new FormGroup({\n      name1: new FormControl('', [Validators.required]),\n      mobNo: new FormControl('', [Validators.required, mobileNoValidator()]),\n      isOwner: new FormControl('', []),\n      email: new FormControl('', [Validators.required, emailValidator()]),\n      password: new FormControl('', [Validators.required, Validators.minLength(8), Validators.maxLength(20), passwordValidator()]),\n      confirmPassword: new FormControl('', [Validators.required]),\n      city: new FormControl('', [Validators.required])\n    });\n  }\n  regFun() {\n    const {\n      password,\n      confirmPassword\n    } = this.RegisterForm.getRawValue();\n    if (password !== confirmPassword) {\n      this.noMatch = true;\n      alert(\"Success\");\n    } else {\n      alert(\"done\");\n      const data = this.RegisterForm.value;\n      this.loginService.register(data).subscribe({\n        next: () => this.success = true,\n        error: response => this.processError(response)\n      });\n      // window.location.href=\"/login\";\n    }\n  }\n\n  processError(response) {\n    if (response.status === 400 && response.error.type === LOGIN_ALREADY_USED_TYPE) {\n      this.errorUserExists = true;\n    } else if (response.status === 400 && response.error.type === EMAIL_ALREADY_USED_TYPE) {\n      this.errorEmailExists = true;\n    } else {\n      this.error = true;\n    }\n  }\n}\nRegistrationComponent.ɵfac = function RegistrationComponent_Factory(t) {\n  return new (t || RegistrationComponent)(i0.ɵɵdirectiveInject(i1.LoginServiceService));\n};\nRegistrationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegistrationComponent,\n  selectors: [[\"app-registration\"]],\n  decls: 58,\n  vars: 11,\n  consts: [[\"color\", \"primary\"], [\"mat-stroked-button\", \"\"], [1, \"g\"], [\"mat-stroked-button\", \"\", 1, \"b\"], [1, \"bg-img\"], [1, \"content\"], [1, \"login-form\", 3, \"formGroup\", \"submit\"], [\"appearance\", \"outline\"], [2, \"color\", \"rgb(188, 216, 241)\"], [\"type\", \"text\", \"matInput\", \"\", \"placeholder\", \"Ex. Ramesh Pawar\", \"formControlName\", \"name1\", 2, \"color\", \"aliceblue\"], [4, \"ngIf\"], [\"type\", \"text\", \"matInput\", \"\", \"placeholder\", \"+918806840585\", \"formControlName\", \"mobNo\", \"required\", \"\", 2, \"color\", \"aliceblue\"], [\"type\", \"email\", \"matInput\", \"\", \"placeholder\", \"Email\", \"formControlName\", \"email\", \"required\", \"\", 2, \"color\", \"aliceblue\"], [\"type\", \"password\", \"matInput\", \"\", \"placeholder\", \"Password\", \"formControlName\", \"password\", \"required\", \"\", 2, \"color\", \"aliceblue\"], [3, \"passwordToCheck\"], [\"type\", \"password\", \"matInput\", \"\", \"placeholder\", \"Password\", \"formControlName\", \"confirmPassword\", \"required\", \"\", 2, \"color\", \"aliceblue\"], [\"type\", \"text\", \"matInput\", \"\", \"placeholder\", \"Ex. Mumbai\", \"formControlName\", \"city\", \"required\", \"\", 2, \"color\", \"aliceblue\"], [\"formControlName\", \"isOwner\"], [\"value\", \"true\", 1, \"example-margin\"], [\"value\", \"false\", 1, \"example-margin\"], [1, \"field\"], [\"type\", \"submit\", \"value\", \"REGISTER\", 3, \"disabled\"], [1, \"signup\"], [\"href\", \"\"]],\n  template: function RegistrationComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-toolbar\", 0)(1, \"button\", 1);\n      i0.ɵɵtext(2, \"Home\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"header\", 2);\n      i0.ɵɵtext(4, \"Registration Form\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 3);\n      i0.ɵɵtext(6, \"Back\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"div\", 4)(8, \"div\", 5)(9, \"form\", 6);\n      i0.ɵɵlistener(\"submit\", function RegistrationComponent_Template_form_submit_9_listener() {\n        return ctx.regFun();\n      });\n      i0.ɵɵelementStart(10, \"mat-form-field\", 7)(11, \"mat-label\", 8);\n      i0.ɵɵtext(12, \"Enter Your Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 9);\n      i0.ɵɵtemplate(14, RegistrationComponent_mat_error_14_Template, 2, 0, \"mat-error\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"mat-form-field\", 7)(16, \"mat-label\", 8);\n      i0.ɵɵtext(17, \"Enter Your Mobile Number\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(18, \"input\", 11);\n      i0.ɵɵtemplate(19, RegistrationComponent_mat_error_19_Template, 2, 0, \"mat-error\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"mat-form-field\", 7)(21, \"mat-label\", 8);\n      i0.ɵɵtext(22, \"Enter Your Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(23, \"input\", 12);\n      i0.ɵɵtemplate(24, RegistrationComponent_mat_error_24_Template, 2, 0, \"mat-error\", 10);\n      i0.ɵɵtemplate(25, RegistrationComponent_mat_error_25_Template, 2, 0, \"mat-error\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"mat-form-field\", 7)(27, \"mat-label\", 8);\n      i0.ɵɵtext(28, \"Enter Your Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(29, \"input\", 13);\n      i0.ɵɵtemplate(30, RegistrationComponent_mat_error_30_Template, 2, 0, \"mat-error\", 10);\n      i0.ɵɵtemplate(31, RegistrationComponent_mat_error_31_Template, 2, 0, \"mat-error\", 10);\n      i0.ɵɵtemplate(32, RegistrationComponent_mat_error_32_Template, 2, 0, \"mat-error\", 10);\n      i0.ɵɵtemplate(33, RegistrationComponent_mat_error_33_Template, 2, 0, \"mat-error\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(34, \"app-password-strength\", 14);\n      i0.ɵɵelementStart(35, \"mat-form-field\", 7)(36, \"mat-label\", 8);\n      i0.ɵɵtext(37, \"Confirm Your Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(38, \"input\", 15);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(39, \"mat-form-field\", 7)(40, \"mat-label\", 8);\n      i0.ɵɵtext(41, \"Enter Your City\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(42, \"input\", 16);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(43, \"span\")(44, \"mat-label\", 8);\n      i0.ɵɵtext(45, \"Register As: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(46, \"mat-radio-group\", 17)(47, \"mat-radio-button\", 18);\n      i0.ɵɵtext(48, \"Owner\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(49, \"mat-radio-button\", 19);\n      i0.ɵɵtext(50, \"Customer\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelement(51, \"br\");\n      i0.ɵɵelementStart(52, \"div\", 20);\n      i0.ɵɵelement(53, \"input\", 21);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(54, \"div\", 22);\n      i0.ɵɵtext(55, \" Wan't to go back? \");\n      i0.ɵɵelementStart(56, \"a\", 23);\n      i0.ɵɵtext(57, \"Home\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"formGroup\", ctx.RegisterForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.RegisterForm.controls[\"name1\"].hasError(\"required\"));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.RegisterForm.controls[\"mobNo\"].hasError(\"invalidMobileNo\"));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.RegisterForm.controls[\"email\"].hasError(\"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.RegisterForm.controls[\"email\"].hasError(\"invalidEmail\"));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.RegisterForm.controls[\"password\"].hasError(\"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.RegisterForm.controls[\"password\"].hasError(\"invalidPassword\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.RegisterForm.controls[\"password\"].hasError(\"minlength\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.RegisterForm.controls[\"password\"].hasError(\"maxlength\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"passwordToCheck\", ctx.RegisterForm.get(\"password\").value);\n      i0.ɵɵadvance(19);\n      i0.ɵɵproperty(\"disabled\", ctx.RegisterForm.invalid);\n    }\n  },\n  dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.FormGroupDirective, i3.FormControlName, i4.MatToolbar, i5.MatFormField, i5.MatLabel, i5.MatError, i6.MatButton, i7.MatInput, i8.MatRadioGroup, i8.MatRadioButton, i9.PasswordStrengthComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { RegistrationComponent };\nexport function emailValidator() {\n  return control => {\n    const emailPattern = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$/;\n    const valid = emailPattern.test(control.value);\n    if (control.value) {\n      return valid ? null : {\n        invalidEmail: true\n      };\n    }\n    return null;\n  };\n}\nexport function passwordValidator() {\n  return control => {\n    const passwordPattern = /^[A-Za-z+_.-]+@[0-9]{1,}$/;\n    const valid = passwordPattern.test(control.value);\n    if (control.value) {\n      return valid ? null : {\n        invalidPassword: true\n      };\n    }\n    return null;\n  };\n}\nexport function mobileNoValidator() {\n  return control => {\n    const mobileNoPattern = /[+](91)[0-9]{10}$/;\n    const valid = mobileNoPattern.test(control.value);\n    if (control.value) {\n      return valid ? null : {\n        invalidMobileNo: true\n      };\n    }\n    return null;\n  };\n}","map":{"version":3,"names":["FormControl","FormGroup","Validators","EMAIL_ALREADY_USED_TYPE","LOGIN_ALREADY_USED_TYPE","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","RegistrationComponent","constructor","loginService","noMatch","error","errorEmailExists","errorUserExists","success","RegisterForm","name1","required","mobNo","mobileNoValidator","isOwner","email","emailValidator","password","minLength","maxLength","passwordValidator","confirmPassword","city","regFun","getRawValue","alert","data","value","register","subscribe","next","response","processError","status","type","ɵɵdirectiveInject","i1","LoginServiceService","selectors","decls","vars","consts","template","RegistrationComponent_Template","rf","ctx","ɵɵlistener","RegistrationComponent_Template_form_submit_9_listener","ɵɵelement","ɵɵtemplate","RegistrationComponent_mat_error_14_Template","RegistrationComponent_mat_error_19_Template","RegistrationComponent_mat_error_24_Template","RegistrationComponent_mat_error_25_Template","RegistrationComponent_mat_error_30_Template","RegistrationComponent_mat_error_31_Template","RegistrationComponent_mat_error_32_Template","RegistrationComponent_mat_error_33_Template","ɵɵadvance","ɵɵproperty","controls","hasError","get","invalid","control","emailPattern","valid","test","invalidEmail","passwordPattern","invalidPassword","mobileNoPattern","invalidMobileNo"],"sources":["C:\\MMY Project\\MakeMyYatraa\\Frontend\\data0\\src\\app\\Register\\registration\\registration.component.ts","C:\\MMY Project\\MakeMyYatraa\\Frontend\\data0\\src\\app\\Register\\registration\\registration.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { LoginServiceService } from '../../Services/login-service.service';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { EMAIL_ALREADY_USED_TYPE, LOGIN_ALREADY_USED_TYPE } from '../../Configuration/error.Constants';\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.css']\n})\nexport class RegistrationComponent {\nRegisterForm:FormGroup;\nnoMatch: boolean=false;\nerror = false;\nerrorEmailExists = false;\nerrorUserExists = false;\nsuccess = false;\nconstructor(private loginService:LoginServiceService){\n  this.RegisterForm = new FormGroup({\n    name1:new FormControl('',[Validators.required]),\n    mobNo:new FormControl('',[Validators.required,mobileNoValidator()]),\n    isOwner:new FormControl('',[]),\n    email:new FormControl('',[Validators.required,emailValidator()]),\n    password: new FormControl('',[Validators.required,Validators.minLength(8),Validators.maxLength(20),passwordValidator()]),\n    confirmPassword: new FormControl('',[Validators.required]),\n    city:new FormControl('',[Validators.required])\n  })\n}\nregFun(){\n  const {password, confirmPassword} = this.RegisterForm.getRawValue();\n  if(password !== confirmPassword){\n     this.noMatch = true;\n     alert(\"Success\");\n  }else{\n    alert(\"done\")\n  const data = this.RegisterForm.value;\n  this.loginService.register(data).subscribe({ next: () => (this.success = true), error: response => this.processError(response) })\n  // window.location.href=\"/login\";\n\n}\n}\nprivate processError(response: HttpErrorResponse): void {\n  if (response.status === 400 && response.error.type === LOGIN_ALREADY_USED_TYPE) {\n    this.errorUserExists = true;\n  } else if (response.status === 400 && response.error.type === EMAIL_ALREADY_USED_TYPE) {\n    this.errorEmailExists = true;\n  } else {\n    this.error = true;\n  }\n}\n}\nexport function emailValidator(): ValidatorFn {\n  return (control: AbstractControl): { [key: string]: any } | null => {\n    const emailPattern = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$/;\n    const valid = emailPattern.test(control.value);\n    if(control.value){\n    return valid ? null : { invalidEmail: true };\n    }return null;\n  };\n}\nexport function passwordValidator(): ValidatorFn {\n  return (control: AbstractControl): { [key: string]: any } | null => {\n    const passwordPattern = /^[A-Za-z+_.-]+@[0-9]{1,}$/;\n    const valid = passwordPattern.test(control.value);\n    if(control.value){\n    return valid ? null : { invalidPassword: true}\n  }return null;\n}\n}\n\nexport function mobileNoValidator(): ValidatorFn {\n  return (control: AbstractControl): { [key: string]: any} | null => {\n    const mobileNoPattern = /[+](91)[0-9]{10}$/;\n    const valid = mobileNoPattern.test(control.value);\n    if(control.value){\n    return valid ? null : { invalidMobileNo: true}\n    }return null;\n  }\n}\n","<mat-toolbar color=\"primary\">\n    <button mat-stroked-button>Home</button>\n    <header class=\"g\">Registration Form</header>\n    <button mat-stroked-button class=\"b\">Back</button>\n</mat-toolbar>\n    <div class=\"bg-img\">\n\n        <div class=\"content\">\n\n           <!-- <header>Registration Form</header><br> -->\n\n           <form [formGroup]=\"RegisterForm\" class=\"login-form\" (submit)=\"regFun()\">\n\n              <mat-form-field appearance=\"outline\">\n                <mat-label style=\"color: rgb(188, 216, 241)\">Enter Your Name</mat-label>\n                 <!-- <span class=\"fa fa-user\"></span> -->\n\n                 <input type=\"text\" matInput placeholder=\"Ex. Ramesh Pawar\" formControlName=\"name1\" style=\"color: aliceblue;\">\n                 <mat-error *ngIf=\"RegisterForm.controls['name1'].hasError('required')\">Name is Mandatory...!!!</mat-error>\n              </mat-form-field>\n              <mat-form-field appearance=\"outline\">\n\n                <mat-label style=\"color: rgb(188, 216, 241)\">Enter Your Mobile Number</mat-label>\n\n                <input type=\"text\" matInput placeholder=\"+918806840585\" formControlName=\"mobNo\" style=\"color: aliceblue;\" required>\n                <mat-error *ngIf=\"RegisterForm.controls['mobNo'].hasError('invalidMobileNo')\">Invalid Mobile Number...!!!</mat-error>\n              </mat-form-field>\n\n              <mat-form-field appearance=\"outline\">\n\n                <mat-label style=\"color: rgb(188, 216, 241)\">Enter Your Email</mat-label>\n\n                <input type=\"email\" matInput placeholder=\"Email\" formControlName=\"email\" style=\"color: aliceblue;\" required>\n                <mat-error *ngIf=\"RegisterForm.controls['email'].hasError('required')\">Email is Mandatory...!!!</mat-error>\n                <mat-error *ngIf=\"RegisterForm.controls['email'].hasError('invalidEmail')\">Invalid Email Format...!!!</mat-error>\n              </mat-form-field>\n              <mat-form-field appearance=\"outline\">\n\n                <mat-label style=\"color: rgb(188, 216, 241)\">Enter Your Password</mat-label>\n\n                 <input type=\"password\" matInput placeholder=\"Password\" formControlName=\"password\" style=\"color: aliceblue;\" required>\n                 <mat-error *ngIf=\"RegisterForm.controls['password'].hasError('required')\">Password is Mandatory...!!!</mat-error>\n                 <mat-error *ngIf=\"RegisterForm.controls['password'].hasError('invalidPassword')\">Invalid Password...!!!</mat-error>\n                 <mat-error *ngIf=\"RegisterForm.controls['password'].hasError('minlength')\">Password is too Short...!!!</mat-error>\n                 <mat-error *ngIf=\"RegisterForm.controls['password'].hasError('maxlength')\">Password is too Large...!!!</mat-error>\n              <!-- <app-password-strength [passwordToCheck]=\"RegisterForm.get('password')!.value\"></app-password-strength> -->\n                </mat-form-field>\n                <app-password-strength [passwordToCheck]=\"RegisterForm.get('password')!.value\"></app-password-strength>\n              <mat-form-field appearance=\"outline\">\n                <mat-label style=\"color: rgb(188, 216, 241)\">Confirm Your Password</mat-label>\n                 <input type=\"password\" matInput placeholder=\"Password\" formControlName=\"confirmPassword\" style=\"color: aliceblue;\" required>\n              </mat-form-field>\n              \n              <mat-form-field appearance=\"outline\">\n\n                <mat-label style=\"color: rgb(188, 216, 241)\">Enter Your City</mat-label>\n\n                <input type=\"text\" matInput placeholder=\"Ex. Mumbai\" formControlName=\"city\" style=\"color: aliceblue;\" required>\n\n              </mat-form-field>\n              <span>\n                <mat-label style=\"color: rgb(188, 216, 241);\">Register As: </mat-label>\n                <mat-radio-group formControlName=\"isOwner\">\n                    <mat-radio-button class=\"example-margin\" value=\"true\">Owner</mat-radio-button>\n                    <mat-radio-button class=\"example-margin\" value=\"false\">Customer</mat-radio-button>\n                </mat-radio-group>\n              </span><br>\n              <div class=\"field\">\n\n                 <input type=\"submit\" [disabled]=\"RegisterForm.invalid\" value=\"REGISTER\">\n\n              </div>\n\n           </form>\n\n           <div class=\"signup\">\n\n             Wan't to go back?\n\n             <a href=\"\">Home</a>\n\n          </div>\n\n        </div>\n\n     </div>\n\n   \n\n   "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}