{"ast":null,"code":"import { Observable, ReplaySubject, catchError, map, mergeMap, of, shareReplay, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-webstorage\";\nimport * as i3 from \"./Auth/state-storage.service\";\nimport * as i4 from \"@angular/router\";\nclass LoginServiceService {\n  constructor(httpclient, localStorageService, sessionStorageService, stateStorageService, router) {\n    this.httpclient = httpclient;\n    this.localStorageService = localStorageService;\n    this.sessionStorageService = sessionStorageService;\n    this.stateStorageService = stateStorageService;\n    this.router = router;\n    this.userIdentity = null;\n    this.authenticationState = new ReplaySubject(1);\n    this.url = \"http://localhost:9000/api/v1/login\";\n    this.url1 = \"http://localhost:9000/api/v1\";\n    this.url2 = \"http://localhost:9000/api\";\n  }\n  register(data) {\n    return this.httpclient.post(`${this.url1}/${\"register\"}`, data);\n  }\n  login(data, pass, remember) {\n    return this.httpclient.post(`${this.url}/${data}`, pass).pipe(map(response => this.authenticateUser(response.token, remember.rememberMe))).pipe(mergeMap(() => this.identity(true)));\n  }\n  googleLogin(token, remember) {\n    this.authenticateUser(token, remember.rememberMe);\n    return this.identity(true);\n  }\n  fbLogin(token, remember) {\n    this.authenticateUser(to);\n  }\n  authenticateUser(response, rememberMe) {\n    const jwt = response;\n    if (rememberMe) {\n      console.log(\"token1\", jwt);\n      this.localStorageService.store('authenticationToken', jwt);\n      this.sessionStorageService.clear('authenticationToken');\n    } else {\n      console.log(\"token2\", jwt);\n      this.sessionStorageService.store('authenticationToken', jwt);\n      this.localStorageService.clear('authenticationToken');\n    }\n  }\n  identity(force) {\n    if (!this.accountCache$ || force) {\n      this.accountCache$ = this.fetch().pipe(tap(account => {\n        this.authenticate(account);\n        this.navigateToStoredUrl();\n      }), shareReplay());\n    }\n    return this.accountCache$.pipe(catchError(() => of(null)));\n  }\n  authenticate(identity) {\n    this.userIdentity = identity;\n    this.authenticationState.next(identity);\n    if (!identity) {\n      this.accountCache$ = null;\n    }\n  }\n  fetch() {\n    return this.httpclient.get(`${this.url2}/${\"owner/fetch\"}`);\n  }\n  navigateToStoredUrl() {\n    // previousState can be set in the authExpiredInterceptor and in the userRouteAccessService\n    // if login is successful, go to stored previousState and clear previousState\n    const previousUrl = this.stateStorageService.getUrl();\n    if (previousUrl) {\n      this.stateStorageService.clearUrl();\n      this.router.navigateByUrl(previousUrl);\n    }\n  }\n  isAuthenticated() {\n    return this.userIdentity !== null;\n  }\n  out() {\n    return new Observable(observer => {\n      this.localStorageService.clear();\n      this.sessionStorageService.clear();\n      observer.complete();\n    });\n  }\n  logout() {\n    this.out().subscribe({\n      complete: () => this.authenticate(null)\n    });\n  }\n}\nLoginServiceService.ɵfac = function LoginServiceService_Factory(t) {\n  return new (t || LoginServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LocalStorageService), i0.ɵɵinject(i2.SessionStorageService), i0.ɵɵinject(i3.StateStorageService), i0.ɵɵinject(i4.Router));\n};\nLoginServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginServiceService,\n  factory: LoginServiceService.ɵfac,\n  providedIn: 'root'\n});\nexport { LoginServiceService };","map":{"version":3,"names":["Observable","ReplaySubject","catchError","map","mergeMap","of","shareReplay","tap","LoginServiceService","constructor","httpclient","localStorageService","sessionStorageService","stateStorageService","router","userIdentity","authenticationState","url","url1","url2","register","data","post","login","pass","remember","pipe","response","authenticateUser","token","rememberMe","identity","googleLogin","fbLogin","to","jwt","console","log","store","clear","force","accountCache$","fetch","account","authenticate","navigateToStoredUrl","next","get","previousUrl","getUrl","clearUrl","navigateByUrl","isAuthenticated","out","observer","complete","logout","subscribe","i0","ɵɵinject","i1","HttpClient","i2","LocalStorageService","SessionStorageService","i3","StateStorageService","i4","Router","factory","ɵfac","providedIn"],"sources":["C:\\MMY Project\\MakeMyYatraa\\Frontend\\Data0\\src\\app\\Services\\login-service.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject, catchError, map, mergeMap, of, shareReplay, tap } from 'rxjs';\nimport { Reg } from '../Domain/General-Domain/Reg';\nimport { Login } from '../Domain/General-Domain/Login';\nimport { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\nimport { Account } from '../Domain/General-Domain/Account';\nimport { StateStorageService } from './Auth/state-storage.service';\nimport { Router } from '@angular/router';\ntype JwtToken={\n  token:string;\n}\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginServiceService {\n  private accountCache$?: Observable<Account> | null;\n  private userIdentity: Account | null = null;\n  private authenticationState = new ReplaySubject<Account | null>(1);\n  \n  constructor(\n    private httpclient:HttpClient,\n    private localStorageService: LocalStorageService,\n    private sessionStorageService: SessionStorageService,\n    private stateStorageService: StateStorageService,\n    private router: Router\n    ) { }\n  url=\"http://localhost:9000/api/v1/login\";\n  url1=\"http://localhost:9000/api/v1\";\n  url2=\"http://localhost:9000/api\";\n  register(data:Reg):Observable<Reg>{\n    return this.httpclient.post<Reg>(`${this.url1}/${\"register\"}`,data);\n  }\n  login(data:number,pass:FormData,remember:Login):Observable<Account | null>{\n    return this.httpclient.post<any>(`${this.url}/${data}`,pass).\n    pipe(map(response => this.authenticateUser(response.token, remember.rememberMe))).pipe(mergeMap(() => this.identity(true)));\n  }\n  googleLogin(token:any, remember:Login):Observable<Account | null> {\n     this.authenticateUser(token, remember.rememberMe);\n     return this.identity(true);\n  }\n  fbLogin(token: any, remember:Login):Observable<Account | null> {\n    this.authenticateUser(to)\n  }\n  authenticateUser(response: any, rememberMe: boolean):void {\n  \n    const jwt = response;\n    if(rememberMe) {\n      console.log(\"token1\",jwt);\n      this.localStorageService.store('authenticationToken', jwt);\n      this.sessionStorageService.clear('authenticationToken');\n    } else{\n      console.log(\"token2\", jwt);\n      this.sessionStorageService.store('authenticationToken', jwt);\n      this.localStorageService.clear('authenticationToken');\n    }\n  }\n   identity(force?: boolean): Observable<Account | null> {\n    if (!this.accountCache$ || force) {\n      this.accountCache$ = this.fetch().pipe(\n        tap((account: Account) => {\n          this.authenticate(account);\n\n          this.navigateToStoredUrl();\n        }),\n        shareReplay()\n      );\n    }\n    return this.accountCache$.pipe(catchError(() => of(null)));\n  }\n   authenticate(identity: Account | null): void {\n    this.userIdentity = identity;\n    this.authenticationState.next(identity);\n    if(!identity) {\n        this.accountCache$ = null;\n    }\n  }\n  private fetch(): Observable<Account> {\n    return this.httpclient.get<Account>(`${this.url2}/${\"owner/fetch\"}`);\n  }\n  private navigateToStoredUrl(): void {\n    // previousState can be set in the authExpiredInterceptor and in the userRouteAccessService\n    // if login is successful, go to stored previousState and clear previousState\n    const previousUrl = this.stateStorageService.getUrl();\n    if (previousUrl) {\n      this.stateStorageService.clearUrl();\n      this.router.navigateByUrl(previousUrl);\n    }\n  }\n  isAuthenticated(): boolean {\n    return this.userIdentity !== null;\n  }\n\n  out(): Observable<void> {\n    return new Observable(observer =>{\n      this.localStorageService.clear();\n      this.sessionStorageService.clear();\n      observer.complete();\n    })\n  }\n  logout(): void{\n    this.out().subscribe({ complete: () => this.authenticate(null)})\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}