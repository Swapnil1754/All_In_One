{"ast":null,"code":"import { ReplaySubject, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-webstorage\";\nclass LoginServiceService {\n  constructor(httpclient, localStorageService, sessionStorageService) {\n    this.httpclient = httpclient;\n    this.localStorageService = localStorageService;\n    this.sessionStorageService = sessionStorageService;\n    this.userIdentity = null;\n    this.authenticationState = new ReplaySubject(1);\n    this.url = \"http://localhost:9000/api/v1/login\";\n    this.url1 = \"http://localhost:9000/api/v1\";\n  }\n  register(data) {\n    return this.httpclient.post(`${this.url1}/${\"register\"}`, data);\n  }\n  login(data, pass, remember) {\n    return this.httpclient.post(`${this.url}/${data}`, pass).pipe(map(response => this.authenticateUser(response, remember.rememberMe)));\n  }\n  authenticateUser(response, rememberMe) {\n    const jwt = response.token;\n    if (rememberMe) {\n      console.log(jwt);\n      this.localStorageService.store('authenticationToken', jwt);\n      this.sessionStorageService.clear('authenticationToken');\n    } else {\n      this.sessionStorageService.store('authenticationToken', jwt);\n      this.localStorageService.clear('authenticationToken');\n    }\n  }\n  identity(force) {\n    if (!this.accountCache$ || force) {\n      this.accountCache$ = this.fetch().pipe(tap(account => {\n        this.authenticate(account);\n        this.navigateToStoredUrl();\n      }), shareReplay());\n    }\n    return this.accountCache$.pipe(catchError(() => of(null)));\n  }\n  authenticate(identity) {\n    this.userIdentity = identity;\n    this.authenticationState.next(identity);\n  }\n}\nLoginServiceService.ɵfac = function LoginServiceService_Factory(t) {\n  return new (t || LoginServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LocalStorageService), i0.ɵɵinject(i2.SessionStorageService));\n};\nLoginServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginServiceService,\n  factory: LoginServiceService.ɵfac,\n  providedIn: 'root'\n});\nexport { LoginServiceService };","map":{"version":3,"names":["ReplaySubject","map","LoginServiceService","constructor","httpclient","localStorageService","sessionStorageService","userIdentity","authenticationState","url","url1","register","data","post","login","pass","remember","pipe","response","authenticateUser","rememberMe","jwt","token","console","log","store","clear","identity","force","accountCache$","fetch","tap","account","authenticate","navigateToStoredUrl","shareReplay","catchError","of","next","i0","ɵɵinject","i1","HttpClient","i2","LocalStorageService","SessionStorageService","factory","ɵfac","providedIn"],"sources":["C:\\MMY Project\\MakeMyYatraa\\Frontend\\data0\\src\\app\\Services\\login-service.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject, map } from 'rxjs';\nimport { Reg } from '../Domain/General-Domain/Reg';\nimport { Login } from '../Domain/General-Domain/Login';\nimport { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\nimport { Account } from '../Domain/General-Domain/Account';\ntype JwtToken={\n  token:string;\n}\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginServiceService {\n  private accountCache$?: Observable<Account> | null;\n  private userIdentity: Account | null = null;\n  private authenticationState = new ReplaySubject<Account | null>(1);\n  constructor(\n    private httpclient:HttpClient,\n    private localStorageService: LocalStorageService,\n    private sessionStorageService: SessionStorageService\n    ) { }\n  url=\"http://localhost:9000/api/v1/login\";\n  url1=\"http://localhost:9000/api/v1\";\n  register(data:Reg):Observable<Reg>{\n    return this.httpclient.post<Reg>(`${this.url1}/${\"register\"}`,data);\n  }\n  login(data:number,pass:FormData,remember:Login):Observable<void>{\n    return this.httpclient.post<any>(`${this.url}/${data}`,pass).\n    pipe(map(response => this.authenticateUser(response, remember.rememberMe)));\n  }\n  private authenticateUser(response: JwtToken, rememberMe: boolean):void {\n  \n    const jwt = response.token;\n    if(rememberMe) {\n      console.log(jwt);\n      this.localStorageService.store('authenticationToken', jwt);\n      this.sessionStorageService.clear('authenticationToken');\n    } else{\n      this.sessionStorageService.store('authenticationToken', jwt);\n      this.localStorageService.clear('authenticationToken');\n    }\n  }\n  private identity(force?: boolean): Observable<Account | null> {\n    if (!this.accountCache$ || force) {\n      this.accountCache$ = this.fetch().pipe(\n        tap((account: Account) => {\n          this.authenticate(account);\n\n          this.navigateToStoredUrl();\n        }),\n        shareReplay()\n      );\n    }\n    return this.accountCache$.pipe(catchError(() => of(null)));\n  }\n  private authenticate(identity: Account | null): void {\n    this.userIdentity = identity;\n    this.authenticationState.next(identity);\n    \n  }\n}\n"],"mappings":"AAEA,SAAqBA,aAAa,EAAEC,GAAG,QAAQ,MAAM;;;;AAQrD,MAGaC,mBAAmB;EAI9BC,YACUC,UAAqB,EACrBC,mBAAwC,EACxCC,qBAA4C;IAF5C,KAAAF,UAAU,GAAVA,UAAU;IACV,KAAAC,mBAAmB,GAAnBA,mBAAmB;IACnB,KAAAC,qBAAqB,GAArBA,qBAAqB;IALvB,KAAAC,YAAY,GAAmB,IAAI;IACnC,KAAAC,mBAAmB,GAAG,IAAIR,aAAa,CAAiB,CAAC,CAAC;IAMlE,KAAAS,GAAG,GAAC,oCAAoC;IACxC,KAAAC,IAAI,GAAC,8BAA8B;EAF7B;EAGNC,QAAQA,CAACC,IAAQ;IACf,OAAO,IAAI,CAACR,UAAU,CAACS,IAAI,CAAM,GAAG,IAAI,CAACH,IAAI,IAAI,UAAU,EAAE,EAACE,IAAI,CAAC;EACrE;EACAE,KAAKA,CAACF,IAAW,EAACG,IAAa,EAACC,QAAc;IAC5C,OAAO,IAAI,CAACZ,UAAU,CAACS,IAAI,CAAM,GAAG,IAAI,CAACJ,GAAG,IAAIG,IAAI,EAAE,EAACG,IAAI,CAAC,CAC5DE,IAAI,CAAChB,GAAG,CAACiB,QAAQ,IAAI,IAAI,CAACC,gBAAgB,CAACD,QAAQ,EAAEF,QAAQ,CAACI,UAAU,CAAC,CAAC,CAAC;EAC7E;EACQD,gBAAgBA,CAACD,QAAkB,EAAEE,UAAmB;IAE9D,MAAMC,GAAG,GAAGH,QAAQ,CAACI,KAAK;IAC1B,IAAGF,UAAU,EAAE;MACbG,OAAO,CAACC,GAAG,CAACH,GAAG,CAAC;MAChB,IAAI,CAAChB,mBAAmB,CAACoB,KAAK,CAAC,qBAAqB,EAAEJ,GAAG,CAAC;MAC1D,IAAI,CAACf,qBAAqB,CAACoB,KAAK,CAAC,qBAAqB,CAAC;KACxD,MAAK;MACJ,IAAI,CAACpB,qBAAqB,CAACmB,KAAK,CAAC,qBAAqB,EAAEJ,GAAG,CAAC;MAC5D,IAAI,CAAChB,mBAAmB,CAACqB,KAAK,CAAC,qBAAqB,CAAC;;EAEzD;EACQC,QAAQA,CAACC,KAAe;IAC9B,IAAI,CAAC,IAAI,CAACC,aAAa,IAAID,KAAK,EAAE;MAChC,IAAI,CAACC,aAAa,GAAG,IAAI,CAACC,KAAK,EAAE,CAACb,IAAI,CACpCc,GAAG,CAAEC,OAAgB,IAAI;QACvB,IAAI,CAACC,YAAY,CAACD,OAAO,CAAC;QAE1B,IAAI,CAACE,mBAAmB,EAAE;MAC5B,CAAC,CAAC,EACFC,WAAW,EAAE,CACd;;IAEH,OAAO,IAAI,CAACN,aAAa,CAACZ,IAAI,CAACmB,UAAU,CAAC,MAAMC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;EAC5D;EACQJ,YAAYA,CAACN,QAAwB;IAC3C,IAAI,CAACpB,YAAY,GAAGoB,QAAQ;IAC5B,IAAI,CAACnB,mBAAmB,CAAC8B,IAAI,CAACX,QAAQ,CAAC;EAEzC;;AA/CWzB,mBAAmB,C;mBAAnBA,mBAAmB,EAAAqC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,mBAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAE,qBAAA;AAAA;AAAnB3C,mBAAmB,C;SAAnBA,mBAAmB;EAAA4C,OAAA,EAAnB5C,mBAAmB,CAAA6C,IAAA;EAAAC,UAAA,EAFlB;AAAM;SAEP9C,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}