{"version":3,"file":"ngx-captcha.mjs","sources":["../../src/lib/services/script.service.ts","../../src/lib/components/base-re-captcha-component.directive.ts","../../src/lib/models/recaptcha-type.enum.ts","../../src/lib/components/invisible-recaptcha.component.ts","../../src/lib/components/recaptcha-2.component.ts","../../src/lib/services/recaptcha_v3.service.ts","../../src/lib/ngx-captcha.module.ts","../../src/public_api.ts","../../src/ngx-captcha.ts"],"sourcesContent":["import { Injectable, NgZone } from \"@angular/core\";\r\nimport { RecaptchaConfiguration } from \"../models/recaptcha-configuration\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class ScriptService {\r\n  private readonly scriptElemId: string = \"ngx-catpcha-script\";\r\n\r\n  /**\r\n   * Name of the global google recaptcha script\r\n   */\r\n  protected readonly windowGrecaptcha = \"grecaptcha\";\r\n\r\n  /**\r\n   * Name of enterpise property in the global google recaptcha script\r\n   */\r\n  protected readonly windowGrecaptchaEnterprise = \"enterprise\";\r\n\r\n  /**\r\n   * Name of the global callback\r\n   */\r\n  protected readonly windowOnLoadCallbackProperty =\r\n    \"ngx_captcha_onload_callback\";\r\n\r\n  /**\r\n   * Name of the global callback for enterprise\r\n   */\r\n  protected readonly windowOnLoadEnterpriseCallbackProperty =\r\n    \"ngx_captcha_onload_enterprise_callback\";\r\n\r\n  protected readonly globalDomain: string = \"recaptcha.net\";\r\n\r\n  protected readonly defaultDomain: string = \"google.com\";\r\n\r\n  protected readonly enterpriseApi: string = \"enterprise.js\";\r\n\r\n  protected readonly defaultApi: string = \"api.js\";\r\n\r\n  constructor(protected zone: NgZone) {}\r\n\r\n  registerCaptchaScript(\r\n    config: RecaptchaConfiguration,\r\n    render: string,\r\n    onLoad: (grecaptcha: any) => void,\r\n    language?: string\r\n  ): void {\r\n    if (this.grecaptchaScriptLoaded(config.useEnterprise)) {\r\n      // recaptcha script is already loaded\r\n      // just call the callback\r\n      if (config.useEnterprise) {\r\n        this.zone.run(() => {\r\n          onLoad(\r\n            (window as any)[this.windowGrecaptcha][\r\n              this.windowGrecaptchaEnterprise\r\n            ]\r\n          );\r\n        });\r\n      } else {\r\n        this.zone.run(() => {\r\n          onLoad((window as any)[this.windowGrecaptcha]);\r\n        });\r\n      }\r\n      return;\r\n    }\r\n\r\n    // we need to patch the callback through global variable, otherwise callback is not accessible\r\n    // note: https://github.com/Enngage/ngx-captcha/issues/2\r\n    if (config.useEnterprise) {\r\n      (window as any)[this.getCallbackName(true)] = <any>(\r\n        (() =>\r\n          this.zone.run(\r\n            onLoad.bind(\r\n              this,\r\n              (window as any)[this.windowGrecaptcha][\r\n                this.windowGrecaptchaEnterprise\r\n              ]\r\n            )\r\n          ))\r\n      );\r\n    } else {\r\n      (window as any)[this.getCallbackName(false)] = <any>(\r\n        (() =>\r\n          this.zone.run(\r\n            onLoad.bind(this, (window as any)[this.windowGrecaptcha])\r\n          ))\r\n      );\r\n    }\r\n\r\n    // prepare script elem\r\n    const scriptElem = document.createElement(\"script\");\r\n    scriptElem.id = this.scriptElemId;\r\n    scriptElem.innerHTML = \"\";\r\n    scriptElem.src = this.getCaptchaScriptUrl(config, render, language);\r\n    scriptElem.async = true;\r\n    scriptElem.defer = true;\r\n\r\n    // add script to header\r\n    document.getElementsByTagName(\"head\")[0].appendChild(scriptElem);\r\n  }\r\n\r\n  cleanup(): void {\r\n    const elem = document.getElementById(this.scriptElemId);\r\n\r\n    if (elem) {\r\n      elem.remove();\r\n    }\r\n    (window as any)[this.getCallbackName()] = undefined;\r\n    (window as any)[this.windowGrecaptcha] = undefined;\r\n  }\r\n\r\n  /**\r\n   * Indicates if google recaptcha script is available and ready to be used\r\n   */\r\n  private grecaptchaScriptLoaded(useEnterprise?: boolean): boolean {\r\n    if (\r\n      !(window as any)[this.getCallbackName(useEnterprise)] ||\r\n      !(window as any)[this.windowGrecaptcha]\r\n    ) {\r\n      return false;\r\n    } else if (\r\n      useEnterprise &&\r\n      (window as any)[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]\r\n    ) {\r\n      return true;\r\n      // if only enterprise script is loaded we need to check some v3's method\r\n    } else if ((window as any)[this.windowGrecaptcha].execute) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gets global callback name\r\n   * @param useEnterprise Optional flag for enterprise script\r\n   * @private\r\n   */\r\n  private getCallbackName(useEnterprise?: boolean): string {\r\n    return useEnterprise\r\n      ? this.windowOnLoadEnterpriseCallbackProperty\r\n      : this.windowOnLoadCallbackProperty;\r\n  }\r\n\r\n  /**\r\n   * Gets language param used in script url\r\n   */\r\n  private getLanguageParam(hl?: string): string {\r\n    if (!hl) {\r\n      return \"\";\r\n    }\r\n\r\n    return `&hl=${hl}`;\r\n  }\r\n\r\n  /**\r\n   * Url to google api script\r\n   */\r\n  private getCaptchaScriptUrl(\r\n    config: RecaptchaConfiguration,\r\n    render: string,\r\n    language?: string\r\n  ): string {\r\n    const domain = config.useGlobalDomain\r\n      ? this.globalDomain\r\n      : this.defaultDomain;\r\n    const api = config.useEnterprise ? this.enterpriseApi : this.defaultApi;\r\n    const callback = this.getCallbackName(config.useEnterprise);\r\n\r\n    return `https://www.${domain}/recaptcha/${api}?onload=${callback}&render=${render}${this.getLanguageParam(\r\n      language\r\n    )}`;\r\n  }\r\n}\r\n","import {\r\n  AfterViewChecked,\r\n  AfterViewInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  InjectFlags,\r\n  Injector,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  Output,\r\n  Renderer2,\r\n  SimpleChanges,\r\n} from \"@angular/core\";\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  NgControl,\r\n} from \"@angular/forms\";\r\n\r\nimport { ReCaptchaType } from \"../models/recaptcha-type.enum\";\r\nimport { ScriptService } from \"../services/script.service\";\r\n\r\n@Directive()\r\nexport abstract class BaseReCaptchaComponentDirective\r\n  implements OnChanges, ControlValueAccessor, AfterViewInit, AfterViewChecked\r\n{\r\n  /**\r\n   * Prefix of the captcha element\r\n   */\r\n  protected readonly captchaElemPrefix = \"ngx_captcha_id_\";\r\n\r\n  private setupCaptcha: boolean = true;\r\n\r\n  /**\r\n   * Google's site key.\r\n   * You can find this under https://www.google.com/recaptcha\r\n   */\r\n  @Input() siteKey?: string;\r\n\r\n  /**\r\n   * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n   */\r\n  @Input() useGlobalDomain: boolean = false;\r\n\r\n  @Input() useEnterprise: boolean = false;\r\n\r\n  /**\r\n   * Type\r\n   */\r\n  @Input() type: \"audio\" | \"image\" = \"image\";\r\n\r\n  /**\r\n   * Language code. Auto-detects the user's language if unspecified.\r\n   */\r\n  @Input() hl?: string;\r\n\r\n  /**\r\n   * Tab index\r\n   */\r\n  @Input() tabIndex = 0;\r\n\r\n  /**\r\n   * Called when captcha receives successful response.\r\n   * Captcha response token is passed to event.\r\n   */\r\n  @Output() success = new EventEmitter<string>();\r\n\r\n  /**\r\n   * Called when captcha is loaded. Event receives id of the captcha\r\n   */\r\n  @Output() load = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Called when captcha is reset.\r\n   */\r\n  @Output() reset = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n   */\r\n  @Output() ready = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Error callback\r\n   */\r\n  @Output() error = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Expired callback\r\n   */\r\n  @Output() expire = new EventEmitter<void>();\r\n\r\n  abstract captchaWrapperElem?: ElementRef;\r\n\r\n  /**\r\n   * Indicates if captcha should be set on load\r\n   */\r\n  private setupAfterLoad = false;\r\n\r\n  /**\r\n   * Captcha element\r\n   */\r\n  protected captchaElem?: HTMLElement;\r\n\r\n  /**\r\n   * Id of the captcha elem\r\n   */\r\n  protected captchaId?: number;\r\n\r\n  /**\r\n   * Holds last response value\r\n   */\r\n  protected currentResponse?: string;\r\n\r\n  /**\r\n   * If enabled, captcha will reset after receiving success response. This is useful\r\n   * when invisible captcha need to be resolved multiple times on same page\r\n   */\r\n  protected resetCaptchaAfterSuccess = false;\r\n\r\n  /**\r\n   * Captcha type\r\n   */\r\n  protected abstract recaptchaType: ReCaptchaType;\r\n\r\n  /**\r\n   * Required by ControlValueAccessor\r\n   */\r\n  protected onChange: (value: string | undefined) => void = (val) => {};\r\n  protected onTouched: (value: string | undefined) => void = (val) => {};\r\n\r\n  /**\r\n   * Indicates if captcha is loaded\r\n   */\r\n  public isLoaded = false;\r\n\r\n  /**\r\n   * Reference to global reCaptcha API\r\n   */\r\n  public reCaptchaApi?: any;\r\n\r\n  /**\r\n   * Id of the DOM element wrapping captcha\r\n   */\r\n  public captchaElemId?: string;\r\n\r\n  /**\r\n   * Form Control to be enable usage in reactive forms\r\n   */\r\n  public control?: AbstractControl | null;\r\n\r\n  protected constructor(\r\n    protected renderer: Renderer2,\r\n    protected zone: NgZone,\r\n    protected injector: Injector,\r\n    protected scriptService: ScriptService\r\n  ) {}\r\n\r\n  ngAfterViewInit() {\r\n    this.control = this.injector.get<NgControl | undefined>(\r\n      NgControl,\r\n      undefined,\r\n      InjectFlags.Optional\r\n    )?.control;\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (this.setupCaptcha) {\r\n      this.setupCaptcha = false;\r\n      this.setupComponent();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets reCaptcha properties\r\n   */\r\n  protected abstract getCaptchaProperties(): any;\r\n\r\n  /**\r\n   * Used for captcha specific setup\r\n   */\r\n  protected abstract captchaSpecificSetup(): void;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // cleanup scripts if language changed because they need to be reloaded\r\n    if (changes && changes.hl) {\r\n      // cleanup scripts when language changes\r\n      if (\r\n        !changes.hl.firstChange &&\r\n        changes.hl.currentValue !== changes.hl.previousValue\r\n      ) {\r\n        this.scriptService.cleanup();\r\n      }\r\n    }\r\n\r\n    if (changes && changes.useGlobalDomain) {\r\n      // cleanup scripts when domain changes\r\n      if (\r\n        !changes.useGlobalDomain.firstChange &&\r\n        changes.useGlobalDomain.currentValue !==\r\n          changes.useGlobalDomain.previousValue\r\n      ) {\r\n        this.scriptService.cleanup();\r\n      }\r\n    }\r\n\r\n    this.setupCaptcha = true;\r\n  }\r\n\r\n  /**\r\n   * Gets captcha response as per reCaptcha docs\r\n   */\r\n  getResponse(): string {\r\n    return this.reCaptchaApi.getResponse(this.captchaId);\r\n  }\r\n\r\n  /**\r\n   * Gets Id of captcha widget\r\n   */\r\n  getCaptchaId(): number | undefined {\r\n    return this.captchaId;\r\n  }\r\n\r\n  /**\r\n   * Resets captcha\r\n   */\r\n  resetCaptcha(): void {\r\n    this.zone.run(() => {\r\n      // reset captcha using Google js api\r\n      this.reCaptchaApi.reset();\r\n\r\n      // required due to forms\r\n      this.onChange(undefined);\r\n      this.onTouched(undefined);\r\n\r\n      // trigger reset event\r\n      this.reset.next();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets last submitted captcha response\r\n   */\r\n  getCurrentResponse(): string | undefined {\r\n    return this.currentResponse;\r\n  }\r\n\r\n  /**\r\n   * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n   */\r\n  reloadCaptcha(): void {\r\n    this.setupComponent();\r\n  }\r\n\r\n  protected ensureCaptchaElem(captchaElemId: string): void {\r\n    const captchaElem = document.getElementById(captchaElemId);\r\n\r\n    if (!captchaElem) {\r\n      throw Error(`Captcha element with id '${captchaElemId}' was not found`);\r\n    }\r\n\r\n    // assign captcha alem\r\n    this.captchaElem = captchaElem;\r\n  }\r\n\r\n  /**\r\n   * Responsible for instantiating captcha element\r\n   */\r\n  protected renderReCaptcha(): void {\r\n    // run outside angular zone due to timeout issues when testing\r\n    // details: https://github.com/Enngage/ngx-captcha/issues/26\r\n    this.zone.runOutsideAngular(() => {\r\n      // to fix reCAPTCHA placeholder element must be an element or id\r\n      // https://github.com/Enngage/ngx-captcha/issues/96\r\n      setTimeout(() => {\r\n        this.captchaId = this.reCaptchaApi.render(\r\n          this.captchaElemId,\r\n          this.getCaptchaProperties()\r\n        );\r\n        this.ready.next();\r\n      }, 0);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Called when captcha receives response\r\n   * @param callback Callback\r\n   */\r\n  protected handleCallback(callback: any): void {\r\n    this.currentResponse = callback;\r\n    this.success.next(callback);\r\n\r\n    this.zone.run(() => {\r\n      this.onChange(callback);\r\n      this.onTouched(callback);\r\n    });\r\n\r\n    if (this.resetCaptchaAfterSuccess) {\r\n      this.resetCaptcha();\r\n    }\r\n  }\r\n\r\n  private getPseudoUniqueNumber(): number {\r\n    return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\r\n  }\r\n\r\n  private setupComponent(): void {\r\n    // captcha specific setup\r\n    this.captchaSpecificSetup();\r\n\r\n    // create captcha wrapper\r\n    this.createAndSetCaptchaElem();\r\n\r\n    this.scriptService.registerCaptchaScript(\r\n      {\r\n        useGlobalDomain: this.useGlobalDomain,\r\n        useEnterprise: this.useEnterprise,\r\n      },\r\n      \"explicit\",\r\n      (grecaptcha) => {\r\n        this.onloadCallback(grecaptcha);\r\n      },\r\n      this.hl\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Called when google's recaptcha script is ready\r\n   */\r\n  private onloadCallback(grecapcha: any): void {\r\n    // assign reference to reCaptcha Api once its loaded\r\n    this.reCaptchaApi = grecapcha;\r\n\r\n    if (!this.reCaptchaApi) {\r\n      throw Error(`ReCaptcha Api was not initialized correctly`);\r\n    }\r\n\r\n    // loaded flag\r\n    this.isLoaded = true;\r\n\r\n    // fire load event\r\n    this.load.next();\r\n\r\n    // render captcha\r\n    this.renderReCaptcha();\r\n\r\n    // setup component if it was flagged as such\r\n    if (this.setupAfterLoad) {\r\n      this.setupAfterLoad = false;\r\n      this.setupComponent();\r\n    }\r\n  }\r\n\r\n  private generateNewElemId(): string {\r\n    return this.captchaElemPrefix + this.getPseudoUniqueNumber();\r\n  }\r\n\r\n  private createAndSetCaptchaElem(): void {\r\n    // generate new captcha id\r\n    this.captchaElemId = this.generateNewElemId();\r\n\r\n    if (!this.captchaElemId) {\r\n      throw Error(`Captcha elem Id is not set`);\r\n    }\r\n\r\n    if (!this.captchaWrapperElem) {\r\n      throw Error(`Captcha DOM element is not initialized`);\r\n    }\r\n\r\n    // remove old html\r\n    this.captchaWrapperElem.nativeElement.innerHTML = \"\";\r\n\r\n    // create new wrapper for captcha\r\n    const newElem = this.renderer.createElement(\"div\");\r\n    newElem.id = this.captchaElemId;\r\n\r\n    this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\r\n\r\n    // when use captcha in cdk stepper then throwing error Captcha element with id 'ngx_captcha_id_XXXX' not found\r\n    // to fix it checking ensureCaptchaElem in timeout so that its check in next call and its able to find element\r\n    setTimeout(() => {\r\n      // update captcha elem\r\n      if (this.captchaElemId) {\r\n        this.ensureCaptchaElem(this.captchaElemId);\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n   * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n   */\r\n  public writeValue(obj: any): void {}\r\n\r\n  /**\r\n   * This method helps us tie together recaptcha and our formControl values\r\n   */\r\n  public registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * At some point we might be interested whether the user has touched our component\r\n   */\r\n  public registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Handles error callback\r\n   */\r\n  protected handleErrorCallback(): void {\r\n    this.zone.run(() => {\r\n      this.onChange(undefined);\r\n      this.onTouched(undefined);\r\n    });\r\n\r\n    this.error.next();\r\n  }\r\n\r\n  /**\r\n   * Handles expired callback\r\n   */\r\n  protected handleExpireCallback(): void {\r\n    this.expire.next();\r\n\r\n    // reset captcha on expire callback\r\n    this.resetCaptcha();\r\n  }\r\n}\r\n","export enum ReCaptchaType {\r\n\r\n    InvisibleReCaptcha,\r\n    ReCaptcha2\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  Injector,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  Renderer2,\r\n  SimpleChanges,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\r\nimport { ScriptService } from '../services/script.service';\r\nimport { BaseReCaptchaComponentDirective } from './base-re-captcha-component.directive';\r\n\r\n@Component({\r\n  selector: 'ngx-invisible-recaptcha',\r\n  template: `\r\n  <div #captchaWrapperElem></div>`,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InvisibleReCaptchaComponent),\r\n      multi: true,\r\n    }\r\n  ]\r\n})\r\nexport class InvisibleReCaptchaComponent extends BaseReCaptchaComponentDirective implements OnChanges {\r\n\r\n  /**\r\n   * This size representing invisible captcha\r\n   */\r\n  protected readonly size = 'invisible';\r\n\r\n  /**\r\n   * Theme\r\n   */\r\n  @Input() theme: 'dark' | 'light' = 'light';\r\n\r\n  /**\r\n   * Badge\r\n   */\r\n  @Input() badge: 'bottomright' | 'bottomleft' | 'inline' = 'bottomright';\r\n\r\n  @ViewChild('captchaWrapperElem', { static: false }) captchaWrapperElem?: ElementRef;\r\n\r\n  protected recaptchaType: ReCaptchaType = ReCaptchaType.InvisibleReCaptcha;\r\n\r\n  constructor(\r\n    protected renderer: Renderer2,\r\n    protected zone: NgZone,\r\n    protected injector: Injector,\r\n    protected scriptService: ScriptService\r\n  ) {\r\n    super(renderer, zone, injector, scriptService);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n\r\n  /**\r\n   * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n   */\r\n  execute(): void {\r\n    // execute captcha\r\n    this.zone.runOutsideAngular(() => this.reCaptchaApi.execute(this.captchaId));\r\n  }\r\n\r\n  protected captchaSpecificSetup(): void {\r\n  }\r\n\r\n  /**\r\n  * Gets reCaptcha properties\r\n  */\r\n  protected getCaptchaProperties(): any {\r\n    return {\r\n      'sitekey': this.siteKey,\r\n      'callback': (response: any) => this.zone.run(() => this.handleCallback(response)),\r\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n      'badge': this.badge,\r\n      'type': this.type,\r\n      'tabindex': this.tabIndex,\r\n      'size': this.size,\r\n      'theme': this.theme\r\n    };\r\n  }\r\n\r\n\r\n}\r\n\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  Injector,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Renderer2,\r\n  SimpleChanges,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\r\nimport { ScriptService } from '../services/script.service';\r\nimport { BaseReCaptchaComponentDirective } from './base-re-captcha-component.directive';\r\n\r\n@Component({\r\n  selector: 'ngx-recaptcha2',\r\n  template: `\r\n  <div #captchaWrapperElem></div>`,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => ReCaptcha2Component),\r\n      multi: true,\r\n    }\r\n  ]\r\n})\r\nexport class ReCaptcha2Component extends BaseReCaptchaComponentDirective implements OnChanges, OnDestroy {\r\n\r\n  /**\r\n  * Name of the global expire callback\r\n  */\r\n  protected readonly windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\r\n\r\n  /**\r\n  * Name of the global error callback\r\n  */\r\n  protected readonly windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\r\n\r\n  /**\r\n   * Theme\r\n   */\r\n  @Input() theme: 'dark' | 'light' = 'light';\r\n\r\n  /**\r\n  * Size\r\n  */\r\n  @Input() size: 'compact' | 'normal' = 'normal';\r\n\r\n  @ViewChild('captchaWrapperElem', { static: false}) captchaWrapperElem?: ElementRef;\r\n\r\n  protected recaptchaType: ReCaptchaType = ReCaptchaType.ReCaptcha2;\r\n\r\n  constructor(\r\n    protected renderer: Renderer2,\r\n    protected zone: NgZone,\r\n    protected injector: Injector,\r\n    protected scriptService: ScriptService,\r\n  ) {\r\n    super(renderer, zone, injector, scriptService);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    (window as any)[this.windowOnErrorCallbackProperty] = {};\r\n    (window as any)[this.windowOnExpireCallbackProperty] = {};\r\n  }\r\n\r\n  protected captchaSpecificSetup(): void {\r\n    this.registerCallbacks();\r\n  }\r\n\r\n  /**\r\n   * Gets reCaptcha properties\r\n  */\r\n  protected getCaptchaProperties(): any {\r\n    return {\r\n      'sitekey': this.siteKey,\r\n      'callback': (response: any) => this.zone.run(() => this.handleCallback(response)),\r\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n      'theme': this.theme,\r\n      'type': this.type,\r\n      'size': this.size,\r\n      'tabindex': this.tabIndex\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Registers global callbacks\r\n  */\r\n  private registerCallbacks(): void {\r\n    (window as any)[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\r\n    (window as any)[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\r\n  }\r\n}\r\n\r\n","import { Injectable, NgZone } from \"@angular/core\";\r\n\r\nimport { ScriptService } from \"./script.service\";\r\nimport { RecaptchaConfiguration } from \"../models/recaptcha-configuration\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class ReCaptchaV3Service {\r\n  constructor(protected scriptService: ScriptService, protected zone: NgZone) {}\r\n\r\n  /**\r\n   * Executes reCaptcha v3/Enterprise with given action and passes token via callback. You need to verify\r\n   * this callback in your backend to get meaningful results.\r\n   *\r\n   * For more information see https://developers.google.com/recaptcha/docs/v3\r\n   * For enterprise see https://cloud.google.com/recaptcha-enterprise/docs\r\n   *\r\n   * @param siteKey Site key found in your google admin panel\r\n   * @param action Action to log\r\n   * @param callback Callback function to to handle token\r\n   * @param config Optional configuration like useGlobalDomain to be provided\r\n   * @param errorCallback Optional Callback function to handle errors\r\n   */\r\n  execute(\r\n    siteKey: string,\r\n    action: string,\r\n    callback: (token: string) => void,\r\n    config?: RecaptchaConfiguration,\r\n    errorCallback?: (error: any) => void\r\n  ): void {\r\n    this.executeAsPromise(siteKey, action, config)\r\n      .then(callback)\r\n      .catch((error) =>\r\n        errorCallback ? errorCallback(error) : console.error(error)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Executes reCaptcha v3/Enterprise with given action and returns token via Promise. You need to verify\r\n   * this token in your backend to get meaningful results.\r\n   *\r\n   * For more information see https://developers.google.com/recaptcha/docs/v3\r\n   * For enterprise see https://cloud.google.com/recaptcha-enterprise/docs\r\n   *\r\n   * @param siteKey Site key found in your google admin panel\r\n   * @param action Action to log\r\n   * @param config Optional configuration like useGlobalDomain to be provided\r\n   */\r\n  executeAsPromise(\r\n    siteKey: string,\r\n    action: string,\r\n    config?: RecaptchaConfiguration\r\n  ): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const configuration = config || {};\r\n\r\n      const onRegister = (grecaptcha: any) => {\r\n        this.zone.runOutsideAngular(() => {\r\n          try {\r\n            grecaptcha\r\n              .execute(siteKey, { action })\r\n              .then((token: any) => this.zone.run(() => resolve(token)));\r\n          } catch (error) {\r\n            reject(error);\r\n          }\r\n        });\r\n      };\r\n\r\n      this.scriptService.registerCaptchaScript(\r\n        configuration,\r\n        siteKey,\r\n        onRegister\r\n      );\r\n    });\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { InvisibleReCaptchaComponent } from './components/invisible-recaptcha.component';\r\nimport { ReCaptcha2Component } from './components/recaptcha-2.component';\r\nimport { ReCaptchaV3Service } from './services/recaptcha_v3.service';\r\nimport { ScriptService } from './services/script.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    ReCaptcha2Component,\r\n    InvisibleReCaptchaComponent\r\n  ],\r\n  providers: [\r\n    ScriptService,\r\n    ReCaptchaV3Service\r\n  ],\r\n  exports: [\r\n    ReCaptcha2Component,\r\n    InvisibleReCaptchaComponent\r\n  ]\r\n})\r\nexport class NgxCaptchaModule {\r\n}\r\n\r\n\r\n","/*\r\n * Public API\r\n */\r\n\r\nexport * from './lib/index';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.ScriptService"],"mappings":"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"}