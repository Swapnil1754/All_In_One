{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectFlags, Directive, Input, Output, forwardRef, Component, ViewChild, NgModule } from '@angular/core';\nimport { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"captchaWrapperElem\"];\nclass ScriptService {\n  constructor(zone) {\n    this.zone = zone;\n    this.scriptElemId = \"ngx-catpcha-script\";\n    /**\r\n     * Name of the global google recaptcha script\r\n     */\n    this.windowGrecaptcha = \"grecaptcha\";\n    /**\r\n     * Name of enterpise property in the global google recaptcha script\r\n     */\n    this.windowGrecaptchaEnterprise = \"enterprise\";\n    /**\r\n     * Name of the global callback\r\n     */\n    this.windowOnLoadCallbackProperty = \"ngx_captcha_onload_callback\";\n    /**\r\n     * Name of the global callback for enterprise\r\n     */\n    this.windowOnLoadEnterpriseCallbackProperty = \"ngx_captcha_onload_enterprise_callback\";\n    this.globalDomain = \"recaptcha.net\";\n    this.defaultDomain = \"google.com\";\n    this.enterpriseApi = \"enterprise.js\";\n    this.defaultApi = \"api.js\";\n  }\n  registerCaptchaScript(config, render, onLoad, language) {\n    if (this.grecaptchaScriptLoaded(config.useEnterprise)) {\n      // recaptcha script is already loaded\n      // just call the callback\n      if (config.useEnterprise) {\n        this.zone.run(() => {\n          onLoad(window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]);\n        });\n      } else {\n        this.zone.run(() => {\n          onLoad(window[this.windowGrecaptcha]);\n        });\n      }\n      return;\n    }\n    // we need to patch the callback through global variable, otherwise callback is not accessible\n    // note: https://github.com/Enngage/ngx-captcha/issues/2\n    if (config.useEnterprise) {\n      window[this.getCallbackName(true)] = () => this.zone.run(onLoad.bind(this, window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]));\n    } else {\n      window[this.getCallbackName(false)] = () => this.zone.run(onLoad.bind(this, window[this.windowGrecaptcha]));\n    }\n    // prepare script elem\n    const scriptElem = document.createElement(\"script\");\n    scriptElem.id = this.scriptElemId;\n    scriptElem.innerHTML = \"\";\n    scriptElem.src = this.getCaptchaScriptUrl(config, render, language);\n    scriptElem.async = true;\n    scriptElem.defer = true;\n    // add script to header\n    document.getElementsByTagName(\"head\")[0].appendChild(scriptElem);\n  }\n  cleanup() {\n    const elem = document.getElementById(this.scriptElemId);\n    if (elem) {\n      elem.remove();\n    }\n    window[this.getCallbackName()] = undefined;\n    window[this.windowGrecaptcha] = undefined;\n  }\n  /**\r\n   * Indicates if google recaptcha script is available and ready to be used\r\n   */\n  grecaptchaScriptLoaded(useEnterprise) {\n    if (!window[this.getCallbackName(useEnterprise)] || !window[this.windowGrecaptcha]) {\n      return false;\n    } else if (useEnterprise && window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]) {\n      return true;\n      // if only enterprise script is loaded we need to check some v3's method\n    } else if (window[this.windowGrecaptcha].execute) {\n      return true;\n    }\n    return false;\n  }\n  /**\r\n   * Gets global callback name\r\n   * @param useEnterprise Optional flag for enterprise script\r\n   * @private\r\n   */\n  getCallbackName(useEnterprise) {\n    return useEnterprise ? this.windowOnLoadEnterpriseCallbackProperty : this.windowOnLoadCallbackProperty;\n  }\n  /**\r\n   * Gets language param used in script url\r\n   */\n  getLanguageParam(hl) {\n    if (!hl) {\n      return \"\";\n    }\n    return `&hl=${hl}`;\n  }\n  /**\r\n   * Url to google api script\r\n   */\n  getCaptchaScriptUrl(config, render, language) {\n    const domain = config.useGlobalDomain ? this.globalDomain : this.defaultDomain;\n    const api = config.useEnterprise ? this.enterpriseApi : this.defaultApi;\n    const callback = this.getCallbackName(config.useEnterprise);\n    return `https://www.${domain}/recaptcha/${api}?onload=${callback}&render=${render}${this.getLanguageParam(language)}`;\n  }\n}\n/** @nocollapse */\nScriptService.ɵfac = function ScriptService_Factory(t) {\n  return new (t || ScriptService)(i0.ɵɵinject(i0.NgZone));\n};\n/** @nocollapse */\nScriptService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ScriptService,\n  factory: ScriptService.ɵfac,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScriptService, [{\n    type: Injectable,\n    args: [{\n      providedIn: \"root\"\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }];\n  }, null);\n})();\nclass BaseReCaptchaComponentDirective {\n  constructor(renderer, zone, injector, scriptService) {\n    this.renderer = renderer;\n    this.zone = zone;\n    this.injector = injector;\n    this.scriptService = scriptService;\n    /**\r\n     * Prefix of the captcha element\r\n     */\n    this.captchaElemPrefix = \"ngx_captcha_id_\";\n    this.setupCaptcha = true;\n    /**\r\n     * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n     */\n    this.useGlobalDomain = false;\n    this.useEnterprise = false;\n    /**\r\n     * Type\r\n     */\n    this.type = \"image\";\n    /**\r\n     * Tab index\r\n     */\n    this.tabIndex = 0;\n    /**\r\n     * Called when captcha receives successful response.\r\n     * Captcha response token is passed to event.\r\n     */\n    this.success = new EventEmitter();\n    /**\r\n     * Called when captcha is loaded. Event receives id of the captcha\r\n     */\n    this.load = new EventEmitter();\n    /**\r\n     * Called when captcha is reset.\r\n     */\n    this.reset = new EventEmitter();\n    /**\r\n     * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n     */\n    this.ready = new EventEmitter();\n    /**\r\n     * Error callback\r\n     */\n    this.error = new EventEmitter();\n    /**\r\n     * Expired callback\r\n     */\n    this.expire = new EventEmitter();\n    /**\r\n     * Indicates if captcha should be set on load\r\n     */\n    this.setupAfterLoad = false;\n    /**\r\n     * If enabled, captcha will reset after receiving success response. This is useful\r\n     * when invisible captcha need to be resolved multiple times on same page\r\n     */\n    this.resetCaptchaAfterSuccess = false;\n    /**\r\n     * Required by ControlValueAccessor\r\n     */\n    this.onChange = val => {};\n    this.onTouched = val => {};\n    /**\r\n     * Indicates if captcha is loaded\r\n     */\n    this.isLoaded = false;\n  }\n  ngAfterViewInit() {\n    this.control = this.injector.get(NgControl, undefined, InjectFlags.Optional)?.control;\n  }\n  ngAfterViewChecked() {\n    if (this.setupCaptcha) {\n      this.setupCaptcha = false;\n      this.setupComponent();\n    }\n  }\n  ngOnChanges(changes) {\n    // cleanup scripts if language changed because they need to be reloaded\n    if (changes && changes.hl) {\n      // cleanup scripts when language changes\n      if (!changes.hl.firstChange && changes.hl.currentValue !== changes.hl.previousValue) {\n        this.scriptService.cleanup();\n      }\n    }\n    if (changes && changes.useGlobalDomain) {\n      // cleanup scripts when domain changes\n      if (!changes.useGlobalDomain.firstChange && changes.useGlobalDomain.currentValue !== changes.useGlobalDomain.previousValue) {\n        this.scriptService.cleanup();\n      }\n    }\n    this.setupCaptcha = true;\n  }\n  /**\r\n   * Gets captcha response as per reCaptcha docs\r\n   */\n  getResponse() {\n    return this.reCaptchaApi.getResponse(this.captchaId);\n  }\n  /**\r\n   * Gets Id of captcha widget\r\n   */\n  getCaptchaId() {\n    return this.captchaId;\n  }\n  /**\r\n   * Resets captcha\r\n   */\n  resetCaptcha() {\n    this.zone.run(() => {\n      // reset captcha using Google js api\n      this.reCaptchaApi.reset();\n      // required due to forms\n      this.onChange(undefined);\n      this.onTouched(undefined);\n      // trigger reset event\n      this.reset.next();\n    });\n  }\n  /**\r\n   * Gets last submitted captcha response\r\n   */\n  getCurrentResponse() {\n    return this.currentResponse;\n  }\n  /**\r\n   * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n   */\n  reloadCaptcha() {\n    this.setupComponent();\n  }\n  ensureCaptchaElem(captchaElemId) {\n    const captchaElem = document.getElementById(captchaElemId);\n    if (!captchaElem) {\n      throw Error(`Captcha element with id '${captchaElemId}' was not found`);\n    }\n    // assign captcha alem\n    this.captchaElem = captchaElem;\n  }\n  /**\r\n   * Responsible for instantiating captcha element\r\n   */\n  renderReCaptcha() {\n    // run outside angular zone due to timeout issues when testing\n    // details: https://github.com/Enngage/ngx-captcha/issues/26\n    this.zone.runOutsideAngular(() => {\n      // to fix reCAPTCHA placeholder element must be an element or id\n      // https://github.com/Enngage/ngx-captcha/issues/96\n      setTimeout(() => {\n        this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());\n        this.ready.next();\n      }, 0);\n    });\n  }\n  /**\r\n   * Called when captcha receives response\r\n   * @param callback Callback\r\n   */\n  handleCallback(callback) {\n    this.currentResponse = callback;\n    this.success.next(callback);\n    this.zone.run(() => {\n      this.onChange(callback);\n      this.onTouched(callback);\n    });\n    if (this.resetCaptchaAfterSuccess) {\n      this.resetCaptcha();\n    }\n  }\n  getPseudoUniqueNumber() {\n    return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\n  }\n  setupComponent() {\n    // captcha specific setup\n    this.captchaSpecificSetup();\n    // create captcha wrapper\n    this.createAndSetCaptchaElem();\n    this.scriptService.registerCaptchaScript({\n      useGlobalDomain: this.useGlobalDomain,\n      useEnterprise: this.useEnterprise\n    }, \"explicit\", grecaptcha => {\n      this.onloadCallback(grecaptcha);\n    }, this.hl);\n  }\n  /**\r\n   * Called when google's recaptcha script is ready\r\n   */\n  onloadCallback(grecapcha) {\n    // assign reference to reCaptcha Api once its loaded\n    this.reCaptchaApi = grecapcha;\n    if (!this.reCaptchaApi) {\n      throw Error(`ReCaptcha Api was not initialized correctly`);\n    }\n    // loaded flag\n    this.isLoaded = true;\n    // fire load event\n    this.load.next();\n    // render captcha\n    this.renderReCaptcha();\n    // setup component if it was flagged as such\n    if (this.setupAfterLoad) {\n      this.setupAfterLoad = false;\n      this.setupComponent();\n    }\n  }\n  generateNewElemId() {\n    return this.captchaElemPrefix + this.getPseudoUniqueNumber();\n  }\n  createAndSetCaptchaElem() {\n    // generate new captcha id\n    this.captchaElemId = this.generateNewElemId();\n    if (!this.captchaElemId) {\n      throw Error(`Captcha elem Id is not set`);\n    }\n    if (!this.captchaWrapperElem) {\n      throw Error(`Captcha DOM element is not initialized`);\n    }\n    // remove old html\n    this.captchaWrapperElem.nativeElement.innerHTML = \"\";\n    // create new wrapper for captcha\n    const newElem = this.renderer.createElement(\"div\");\n    newElem.id = this.captchaElemId;\n    this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\n    // when use captcha in cdk stepper then throwing error Captcha element with id 'ngx_captcha_id_XXXX' not found\n    // to fix it checking ensureCaptchaElem in timeout so that its check in next call and its able to find element\n    setTimeout(() => {\n      // update captcha elem\n      if (this.captchaElemId) {\n        this.ensureCaptchaElem(this.captchaElemId);\n      }\n    }, 0);\n  }\n  /**\r\n   * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n   * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n   */\n  writeValue(obj) {}\n  /**\r\n   * This method helps us tie together recaptcha and our formControl values\r\n   */\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  /**\r\n   * At some point we might be interested whether the user has touched our component\r\n   */\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\r\n   * Handles error callback\r\n   */\n  handleErrorCallback() {\n    this.zone.run(() => {\n      this.onChange(undefined);\n      this.onTouched(undefined);\n    });\n    this.error.next();\n  }\n  /**\r\n   * Handles expired callback\r\n   */\n  handleExpireCallback() {\n    this.expire.next();\n    // reset captcha on expire callback\n    this.resetCaptcha();\n  }\n}\n/** @nocollapse */\nBaseReCaptchaComponentDirective.ɵfac = function BaseReCaptchaComponentDirective_Factory(t) {\n  return new (t || BaseReCaptchaComponentDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(ScriptService));\n};\n/** @nocollapse */\nBaseReCaptchaComponentDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: BaseReCaptchaComponentDirective,\n  inputs: {\n    siteKey: \"siteKey\",\n    useGlobalDomain: \"useGlobalDomain\",\n    useEnterprise: \"useEnterprise\",\n    type: \"type\",\n    hl: \"hl\",\n    tabIndex: \"tabIndex\"\n  },\n  outputs: {\n    success: \"success\",\n    load: \"load\",\n    reset: \"reset\",\n    ready: \"ready\",\n    error: \"error\",\n    expire: \"expire\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseReCaptchaComponentDirective, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.Injector\n    }, {\n      type: ScriptService\n    }];\n  }, {\n    siteKey: [{\n      type: Input\n    }],\n    useGlobalDomain: [{\n      type: Input\n    }],\n    useEnterprise: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    hl: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    success: [{\n      type: Output\n    }],\n    load: [{\n      type: Output\n    }],\n    reset: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }],\n    expire: [{\n      type: Output\n    }]\n  });\n})();\nvar ReCaptchaType;\n(function (ReCaptchaType) {\n  ReCaptchaType[ReCaptchaType[\"InvisibleReCaptcha\"] = 0] = \"InvisibleReCaptcha\";\n  ReCaptchaType[ReCaptchaType[\"ReCaptcha2\"] = 1] = \"ReCaptcha2\";\n})(ReCaptchaType || (ReCaptchaType = {}));\nclass InvisibleReCaptchaComponent extends BaseReCaptchaComponentDirective {\n  constructor(renderer, zone, injector, scriptService) {\n    super(renderer, zone, injector, scriptService);\n    this.renderer = renderer;\n    this.zone = zone;\n    this.injector = injector;\n    this.scriptService = scriptService;\n    /**\r\n     * This size representing invisible captcha\r\n     */\n    this.size = 'invisible';\n    /**\r\n     * Theme\r\n     */\n    this.theme = 'light';\n    /**\r\n     * Badge\r\n     */\n    this.badge = 'bottomright';\n    this.recaptchaType = ReCaptchaType.InvisibleReCaptcha;\n  }\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n  }\n  /**\r\n   * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n   */\n  execute() {\n    // execute captcha\n    this.zone.runOutsideAngular(() => this.reCaptchaApi.execute(this.captchaId));\n  }\n  captchaSpecificSetup() {}\n  /**\r\n  * Gets reCaptcha properties\r\n  */\n  getCaptchaProperties() {\n    return {\n      'sitekey': this.siteKey,\n      'callback': response => this.zone.run(() => this.handleCallback(response)),\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\n      'badge': this.badge,\n      'type': this.type,\n      'tabindex': this.tabIndex,\n      'size': this.size,\n      'theme': this.theme\n    };\n  }\n}\n/** @nocollapse */\nInvisibleReCaptchaComponent.ɵfac = function InvisibleReCaptchaComponent_Factory(t) {\n  return new (t || InvisibleReCaptchaComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(ScriptService));\n};\n/** @nocollapse */\nInvisibleReCaptchaComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: InvisibleReCaptchaComponent,\n  selectors: [[\"ngx-invisible-recaptcha\"]],\n  viewQuery: function InvisibleReCaptchaComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.captchaWrapperElem = _t.first);\n    }\n  },\n  inputs: {\n    theme: \"theme\",\n    badge: \"badge\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => InvisibleReCaptchaComponent),\n    multi: true\n  }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[\"captchaWrapperElem\", \"\"]],\n  template: function InvisibleReCaptchaComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n  },\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InvisibleReCaptchaComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-invisible-recaptcha',\n      template: `\n  <div #captchaWrapperElem></div>`,\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => InvisibleReCaptchaComponent),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.Injector\n    }, {\n      type: ScriptService\n    }];\n  }, {\n    theme: [{\n      type: Input\n    }],\n    badge: [{\n      type: Input\n    }],\n    captchaWrapperElem: [{\n      type: ViewChild,\n      args: ['captchaWrapperElem', {\n        static: false\n      }]\n    }]\n  });\n})();\nclass ReCaptcha2Component extends BaseReCaptchaComponentDirective {\n  constructor(renderer, zone, injector, scriptService) {\n    super(renderer, zone, injector, scriptService);\n    this.renderer = renderer;\n    this.zone = zone;\n    this.injector = injector;\n    this.scriptService = scriptService;\n    /**\r\n    * Name of the global expire callback\r\n    */\n    this.windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\n    /**\r\n    * Name of the global error callback\r\n    */\n    this.windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\n    /**\r\n     * Theme\r\n     */\n    this.theme = 'light';\n    /**\r\n    * Size\r\n    */\n    this.size = 'normal';\n    this.recaptchaType = ReCaptchaType.ReCaptcha2;\n  }\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n  }\n  ngOnDestroy() {\n    window[this.windowOnErrorCallbackProperty] = {};\n    window[this.windowOnExpireCallbackProperty] = {};\n  }\n  captchaSpecificSetup() {\n    this.registerCallbacks();\n  }\n  /**\r\n   * Gets reCaptcha properties\r\n  */\n  getCaptchaProperties() {\n    return {\n      'sitekey': this.siteKey,\n      'callback': response => this.zone.run(() => this.handleCallback(response)),\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\n      'theme': this.theme,\n      'type': this.type,\n      'size': this.size,\n      'tabindex': this.tabIndex\n    };\n  }\n  /**\r\n   * Registers global callbacks\r\n  */\n  registerCallbacks() {\n    window[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\n    window[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\n  }\n}\n/** @nocollapse */\nReCaptcha2Component.ɵfac = function ReCaptcha2Component_Factory(t) {\n  return new (t || ReCaptcha2Component)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(ScriptService));\n};\n/** @nocollapse */\nReCaptcha2Component.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ReCaptcha2Component,\n  selectors: [[\"ngx-recaptcha2\"]],\n  viewQuery: function ReCaptcha2Component_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.captchaWrapperElem = _t.first);\n    }\n  },\n  inputs: {\n    theme: \"theme\",\n    size: \"size\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ReCaptcha2Component),\n    multi: true\n  }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[\"captchaWrapperElem\", \"\"]],\n  template: function ReCaptcha2Component_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n  },\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ReCaptcha2Component, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-recaptcha2',\n      template: `\n  <div #captchaWrapperElem></div>`,\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => ReCaptcha2Component),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.Injector\n    }, {\n      type: ScriptService\n    }];\n  }, {\n    theme: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    captchaWrapperElem: [{\n      type: ViewChild,\n      args: ['captchaWrapperElem', {\n        static: false\n      }]\n    }]\n  });\n})();\nclass ReCaptchaV3Service {\n  constructor(scriptService, zone) {\n    this.scriptService = scriptService;\n    this.zone = zone;\n  }\n  /**\r\n   * Executes reCaptcha v3/Enterprise with given action and passes token via callback. You need to verify\r\n   * this callback in your backend to get meaningful results.\r\n   *\r\n   * For more information see https://developers.google.com/recaptcha/docs/v3\r\n   * For enterprise see https://cloud.google.com/recaptcha-enterprise/docs\r\n   *\r\n   * @param siteKey Site key found in your google admin panel\r\n   * @param action Action to log\r\n   * @param callback Callback function to to handle token\r\n   * @param config Optional configuration like useGlobalDomain to be provided\r\n   * @param errorCallback Optional Callback function to handle errors\r\n   */\n  execute(siteKey, action, callback, config, errorCallback) {\n    this.executeAsPromise(siteKey, action, config).then(callback).catch(error => errorCallback ? errorCallback(error) : console.error(error));\n  }\n  /**\r\n   * Executes reCaptcha v3/Enterprise with given action and returns token via Promise. You need to verify\r\n   * this token in your backend to get meaningful results.\r\n   *\r\n   * For more information see https://developers.google.com/recaptcha/docs/v3\r\n   * For enterprise see https://cloud.google.com/recaptcha-enterprise/docs\r\n   *\r\n   * @param siteKey Site key found in your google admin panel\r\n   * @param action Action to log\r\n   * @param config Optional configuration like useGlobalDomain to be provided\r\n   */\n  executeAsPromise(siteKey, action, config) {\n    return new Promise((resolve, reject) => {\n      const configuration = config || {};\n      const onRegister = grecaptcha => {\n        this.zone.runOutsideAngular(() => {\n          try {\n            grecaptcha.execute(siteKey, {\n              action\n            }).then(token => this.zone.run(() => resolve(token)));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      };\n      this.scriptService.registerCaptchaScript(configuration, siteKey, onRegister);\n    });\n  }\n}\n/** @nocollapse */\nReCaptchaV3Service.ɵfac = function ReCaptchaV3Service_Factory(t) {\n  return new (t || ReCaptchaV3Service)(i0.ɵɵinject(ScriptService), i0.ɵɵinject(i0.NgZone));\n};\n/** @nocollapse */\nReCaptchaV3Service.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ReCaptchaV3Service,\n  factory: ReCaptchaV3Service.ɵfac,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ReCaptchaV3Service, [{\n    type: Injectable,\n    args: [{\n      providedIn: \"root\"\n    }]\n  }], function () {\n    return [{\n      type: ScriptService\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\nclass NgxCaptchaModule {}\n/** @nocollapse */\nNgxCaptchaModule.ɵfac = function NgxCaptchaModule_Factory(t) {\n  return new (t || NgxCaptchaModule)();\n};\n/** @nocollapse */\nNgxCaptchaModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxCaptchaModule\n});\n/** @nocollapse */\nNgxCaptchaModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ScriptService, ReCaptchaV3Service],\n  imports: [CommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxCaptchaModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [ReCaptcha2Component, InvisibleReCaptchaComponent],\n      providers: [ScriptService, ReCaptchaV3Service],\n      exports: [ReCaptcha2Component, InvisibleReCaptchaComponent]\n    }]\n  }], null, null);\n})();\n\n/*\r\n * Public API\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { BaseReCaptchaComponentDirective, InvisibleReCaptchaComponent, NgxCaptchaModule, ReCaptcha2Component, ReCaptchaType, ReCaptchaV3Service, ScriptService };","map":{"version":3,"names":["i0","Injectable","EventEmitter","InjectFlags","Directive","Input","Output","forwardRef","Component","ViewChild","NgModule","NgControl","NG_VALUE_ACCESSOR","CommonModule","_c0","ScriptService","constructor","zone","scriptElemId","windowGrecaptcha","windowGrecaptchaEnterprise","windowOnLoadCallbackProperty","windowOnLoadEnterpriseCallbackProperty","globalDomain","defaultDomain","enterpriseApi","defaultApi","registerCaptchaScript","config","render","onLoad","language","grecaptchaScriptLoaded","useEnterprise","run","window","getCallbackName","bind","scriptElem","document","createElement","id","innerHTML","src","getCaptchaScriptUrl","async","defer","getElementsByTagName","appendChild","cleanup","elem","getElementById","remove","undefined","execute","getLanguageParam","hl","domain","useGlobalDomain","api","callback","ɵfac","ScriptService_Factory","t","ɵɵinject","NgZone","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","BaseReCaptchaComponentDirective","renderer","injector","scriptService","captchaElemPrefix","setupCaptcha","tabIndex","success","load","reset","ready","error","expire","setupAfterLoad","resetCaptchaAfterSuccess","onChange","val","onTouched","isLoaded","ngAfterViewInit","control","get","Optional","ngAfterViewChecked","setupComponent","ngOnChanges","changes","firstChange","currentValue","previousValue","getResponse","reCaptchaApi","captchaId","getCaptchaId","resetCaptcha","next","getCurrentResponse","currentResponse","reloadCaptcha","ensureCaptchaElem","captchaElemId","captchaElem","Error","renderReCaptcha","runOutsideAngular","setTimeout","getCaptchaProperties","handleCallback","getPseudoUniqueNumber","Date","getUTCMilliseconds","Math","floor","random","captchaSpecificSetup","createAndSetCaptchaElem","grecaptcha","onloadCallback","grecapcha","generateNewElemId","captchaWrapperElem","nativeElement","newElem","writeValue","obj","registerOnChange","fn","registerOnTouched","handleErrorCallback","handleExpireCallback","BaseReCaptchaComponentDirective_Factory","ɵɵdirectiveInject","Renderer2","Injector","ɵdir","ɵɵdefineDirective","inputs","siteKey","outputs","features","ɵɵNgOnChangesFeature","ReCaptchaType","InvisibleReCaptchaComponent","size","theme","badge","recaptchaType","InvisibleReCaptcha","response","expired-callback","error-callback","InvisibleReCaptchaComponent_Factory","ɵcmp","ɵɵdefineComponent","selectors","viewQuery","InvisibleReCaptchaComponent_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","ɵɵProvidersFeature","provide","useExisting","multi","ɵɵInheritDefinitionFeature","decls","vars","consts","template","InvisibleReCaptchaComponent_Template","ɵɵelement","encapsulation","selector","providers","static","ReCaptcha2Component","windowOnErrorCallbackProperty","windowOnExpireCallbackProperty","ReCaptcha2","ngOnDestroy","registerCallbacks","ReCaptcha2Component_Factory","ReCaptcha2Component_Query","ReCaptcha2Component_Template","ReCaptchaV3Service","action","errorCallback","executeAsPromise","then","catch","console","Promise","resolve","reject","configuration","onRegister","ReCaptchaV3Service_Factory","NgxCaptchaModule","NgxCaptchaModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports"],"sources":["C:/MMY Project/MakeMyYatraa/Frontend/Data0/node_modules/ngx-captcha/fesm2020/ngx-captcha.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectFlags, Directive, Input, Output, forwardRef, Component, ViewChild, NgModule } from '@angular/core';\nimport { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nclass ScriptService {\r\n    constructor(zone) {\r\n        this.zone = zone;\r\n        this.scriptElemId = \"ngx-catpcha-script\";\r\n        /**\r\n         * Name of the global google recaptcha script\r\n         */\r\n        this.windowGrecaptcha = \"grecaptcha\";\r\n        /**\r\n         * Name of enterpise property in the global google recaptcha script\r\n         */\r\n        this.windowGrecaptchaEnterprise = \"enterprise\";\r\n        /**\r\n         * Name of the global callback\r\n         */\r\n        this.windowOnLoadCallbackProperty = \"ngx_captcha_onload_callback\";\r\n        /**\r\n         * Name of the global callback for enterprise\r\n         */\r\n        this.windowOnLoadEnterpriseCallbackProperty = \"ngx_captcha_onload_enterprise_callback\";\r\n        this.globalDomain = \"recaptcha.net\";\r\n        this.defaultDomain = \"google.com\";\r\n        this.enterpriseApi = \"enterprise.js\";\r\n        this.defaultApi = \"api.js\";\r\n    }\r\n    registerCaptchaScript(config, render, onLoad, language) {\r\n        if (this.grecaptchaScriptLoaded(config.useEnterprise)) {\r\n            // recaptcha script is already loaded\r\n            // just call the callback\r\n            if (config.useEnterprise) {\r\n                this.zone.run(() => {\r\n                    onLoad(window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]);\r\n                });\r\n            }\r\n            else {\r\n                this.zone.run(() => {\r\n                    onLoad(window[this.windowGrecaptcha]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n        // we need to patch the callback through global variable, otherwise callback is not accessible\r\n        // note: https://github.com/Enngage/ngx-captcha/issues/2\r\n        if (config.useEnterprise) {\r\n            window[this.getCallbackName(true)] = ((() => this.zone.run(onLoad.bind(this, window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]))));\r\n        }\r\n        else {\r\n            window[this.getCallbackName(false)] = ((() => this.zone.run(onLoad.bind(this, window[this.windowGrecaptcha]))));\r\n        }\r\n        // prepare script elem\r\n        const scriptElem = document.createElement(\"script\");\r\n        scriptElem.id = this.scriptElemId;\r\n        scriptElem.innerHTML = \"\";\r\n        scriptElem.src = this.getCaptchaScriptUrl(config, render, language);\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n        // add script to header\r\n        document.getElementsByTagName(\"head\")[0].appendChild(scriptElem);\r\n    }\r\n    cleanup() {\r\n        const elem = document.getElementById(this.scriptElemId);\r\n        if (elem) {\r\n            elem.remove();\r\n        }\r\n        window[this.getCallbackName()] = undefined;\r\n        window[this.windowGrecaptcha] = undefined;\r\n    }\r\n    /**\r\n     * Indicates if google recaptcha script is available and ready to be used\r\n     */\r\n    grecaptchaScriptLoaded(useEnterprise) {\r\n        if (!window[this.getCallbackName(useEnterprise)] ||\r\n            !window[this.windowGrecaptcha]) {\r\n            return false;\r\n        }\r\n        else if (useEnterprise &&\r\n            window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]) {\r\n            return true;\r\n            // if only enterprise script is loaded we need to check some v3's method\r\n        }\r\n        else if (window[this.windowGrecaptcha].execute) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Gets global callback name\r\n     * @param useEnterprise Optional flag for enterprise script\r\n     * @private\r\n     */\r\n    getCallbackName(useEnterprise) {\r\n        return useEnterprise\r\n            ? this.windowOnLoadEnterpriseCallbackProperty\r\n            : this.windowOnLoadCallbackProperty;\r\n    }\r\n    /**\r\n     * Gets language param used in script url\r\n     */\r\n    getLanguageParam(hl) {\r\n        if (!hl) {\r\n            return \"\";\r\n        }\r\n        return `&hl=${hl}`;\r\n    }\r\n    /**\r\n     * Url to google api script\r\n     */\r\n    getCaptchaScriptUrl(config, render, language) {\r\n        const domain = config.useGlobalDomain\r\n            ? this.globalDomain\r\n            : this.defaultDomain;\r\n        const api = config.useEnterprise ? this.enterpriseApi : this.defaultApi;\r\n        const callback = this.getCallbackName(config.useEnterprise);\r\n        return `https://www.${domain}/recaptcha/${api}?onload=${callback}&render=${render}${this.getLanguageParam(language)}`;\r\n    }\r\n}\r\n/** @nocollapse */ ScriptService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ScriptService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ ScriptService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ScriptService, providedIn: \"root\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ScriptService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: \"root\",\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });\n\nclass BaseReCaptchaComponentDirective {\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * Prefix of the captcha element\r\n         */\r\n        this.captchaElemPrefix = \"ngx_captcha_id_\";\r\n        this.setupCaptcha = true;\r\n        /**\r\n         * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n         */\r\n        this.useGlobalDomain = false;\r\n        this.useEnterprise = false;\r\n        /**\r\n         * Type\r\n         */\r\n        this.type = \"image\";\r\n        /**\r\n         * Tab index\r\n         */\r\n        this.tabIndex = 0;\r\n        /**\r\n         * Called when captcha receives successful response.\r\n         * Captcha response token is passed to event.\r\n         */\r\n        this.success = new EventEmitter();\r\n        /**\r\n         * Called when captcha is loaded. Event receives id of the captcha\r\n         */\r\n        this.load = new EventEmitter();\r\n        /**\r\n         * Called when captcha is reset.\r\n         */\r\n        this.reset = new EventEmitter();\r\n        /**\r\n         * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n         */\r\n        this.ready = new EventEmitter();\r\n        /**\r\n         * Error callback\r\n         */\r\n        this.error = new EventEmitter();\r\n        /**\r\n         * Expired callback\r\n         */\r\n        this.expire = new EventEmitter();\r\n        /**\r\n         * Indicates if captcha should be set on load\r\n         */\r\n        this.setupAfterLoad = false;\r\n        /**\r\n         * If enabled, captcha will reset after receiving success response. This is useful\r\n         * when invisible captcha need to be resolved multiple times on same page\r\n         */\r\n        this.resetCaptchaAfterSuccess = false;\r\n        /**\r\n         * Required by ControlValueAccessor\r\n         */\r\n        this.onChange = (val) => { };\r\n        this.onTouched = (val) => { };\r\n        /**\r\n         * Indicates if captcha is loaded\r\n         */\r\n        this.isLoaded = false;\r\n    }\r\n    ngAfterViewInit() {\r\n        this.control = this.injector.get(NgControl, undefined, InjectFlags.Optional)?.control;\r\n    }\r\n    ngAfterViewChecked() {\r\n        if (this.setupCaptcha) {\r\n            this.setupCaptcha = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        // cleanup scripts if language changed because they need to be reloaded\r\n        if (changes && changes.hl) {\r\n            // cleanup scripts when language changes\r\n            if (!changes.hl.firstChange &&\r\n                changes.hl.currentValue !== changes.hl.previousValue) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n        if (changes && changes.useGlobalDomain) {\r\n            // cleanup scripts when domain changes\r\n            if (!changes.useGlobalDomain.firstChange &&\r\n                changes.useGlobalDomain.currentValue !==\r\n                    changes.useGlobalDomain.previousValue) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n        this.setupCaptcha = true;\r\n    }\r\n    /**\r\n     * Gets captcha response as per reCaptcha docs\r\n     */\r\n    getResponse() {\r\n        return this.reCaptchaApi.getResponse(this.captchaId);\r\n    }\r\n    /**\r\n     * Gets Id of captcha widget\r\n     */\r\n    getCaptchaId() {\r\n        return this.captchaId;\r\n    }\r\n    /**\r\n     * Resets captcha\r\n     */\r\n    resetCaptcha() {\r\n        this.zone.run(() => {\r\n            // reset captcha using Google js api\r\n            this.reCaptchaApi.reset();\r\n            // required due to forms\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n            // trigger reset event\r\n            this.reset.next();\r\n        });\r\n    }\r\n    /**\r\n     * Gets last submitted captcha response\r\n     */\r\n    getCurrentResponse() {\r\n        return this.currentResponse;\r\n    }\r\n    /**\r\n     * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n     */\r\n    reloadCaptcha() {\r\n        this.setupComponent();\r\n    }\r\n    ensureCaptchaElem(captchaElemId) {\r\n        const captchaElem = document.getElementById(captchaElemId);\r\n        if (!captchaElem) {\r\n            throw Error(`Captcha element with id '${captchaElemId}' was not found`);\r\n        }\r\n        // assign captcha alem\r\n        this.captchaElem = captchaElem;\r\n    }\r\n    /**\r\n     * Responsible for instantiating captcha element\r\n     */\r\n    renderReCaptcha() {\r\n        // run outside angular zone due to timeout issues when testing\r\n        // details: https://github.com/Enngage/ngx-captcha/issues/26\r\n        this.zone.runOutsideAngular(() => {\r\n            // to fix reCAPTCHA placeholder element must be an element or id\r\n            // https://github.com/Enngage/ngx-captcha/issues/96\r\n            setTimeout(() => {\r\n                this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());\r\n                this.ready.next();\r\n            }, 0);\r\n        });\r\n    }\r\n    /**\r\n     * Called when captcha receives response\r\n     * @param callback Callback\r\n     */\r\n    handleCallback(callback) {\r\n        this.currentResponse = callback;\r\n        this.success.next(callback);\r\n        this.zone.run(() => {\r\n            this.onChange(callback);\r\n            this.onTouched(callback);\r\n        });\r\n        if (this.resetCaptchaAfterSuccess) {\r\n            this.resetCaptcha();\r\n        }\r\n    }\r\n    getPseudoUniqueNumber() {\r\n        return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\r\n    }\r\n    setupComponent() {\r\n        // captcha specific setup\r\n        this.captchaSpecificSetup();\r\n        // create captcha wrapper\r\n        this.createAndSetCaptchaElem();\r\n        this.scriptService.registerCaptchaScript({\r\n            useGlobalDomain: this.useGlobalDomain,\r\n            useEnterprise: this.useEnterprise,\r\n        }, \"explicit\", (grecaptcha) => {\r\n            this.onloadCallback(grecaptcha);\r\n        }, this.hl);\r\n    }\r\n    /**\r\n     * Called when google's recaptcha script is ready\r\n     */\r\n    onloadCallback(grecapcha) {\r\n        // assign reference to reCaptcha Api once its loaded\r\n        this.reCaptchaApi = grecapcha;\r\n        if (!this.reCaptchaApi) {\r\n            throw Error(`ReCaptcha Api was not initialized correctly`);\r\n        }\r\n        // loaded flag\r\n        this.isLoaded = true;\r\n        // fire load event\r\n        this.load.next();\r\n        // render captcha\r\n        this.renderReCaptcha();\r\n        // setup component if it was flagged as such\r\n        if (this.setupAfterLoad) {\r\n            this.setupAfterLoad = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n    generateNewElemId() {\r\n        return this.captchaElemPrefix + this.getPseudoUniqueNumber();\r\n    }\r\n    createAndSetCaptchaElem() {\r\n        // generate new captcha id\r\n        this.captchaElemId = this.generateNewElemId();\r\n        if (!this.captchaElemId) {\r\n            throw Error(`Captcha elem Id is not set`);\r\n        }\r\n        if (!this.captchaWrapperElem) {\r\n            throw Error(`Captcha DOM element is not initialized`);\r\n        }\r\n        // remove old html\r\n        this.captchaWrapperElem.nativeElement.innerHTML = \"\";\r\n        // create new wrapper for captcha\r\n        const newElem = this.renderer.createElement(\"div\");\r\n        newElem.id = this.captchaElemId;\r\n        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\r\n        // when use captcha in cdk stepper then throwing error Captcha element with id 'ngx_captcha_id_XXXX' not found\r\n        // to fix it checking ensureCaptchaElem in timeout so that its check in next call and its able to find element\r\n        setTimeout(() => {\r\n            // update captcha elem\r\n            if (this.captchaElemId) {\r\n                this.ensureCaptchaElem(this.captchaElemId);\r\n            }\r\n        }, 0);\r\n    }\r\n    /**\r\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n     */\r\n    writeValue(obj) { }\r\n    /**\r\n     * This method helps us tie together recaptcha and our formControl values\r\n     */\r\n    registerOnChange(fn) {\r\n        this.onChange = fn;\r\n    }\r\n    /**\r\n     * At some point we might be interested whether the user has touched our component\r\n     */\r\n    registerOnTouched(fn) {\r\n        this.onTouched = fn;\r\n    }\r\n    /**\r\n     * Handles error callback\r\n     */\r\n    handleErrorCallback() {\r\n        this.zone.run(() => {\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n        });\r\n        this.error.next();\r\n    }\r\n    /**\r\n     * Handles expired callback\r\n     */\r\n    handleExpireCallback() {\r\n        this.expire.next();\r\n        // reset captcha on expire callback\r\n        this.resetCaptcha();\r\n    }\r\n}\r\n/** @nocollapse */ BaseReCaptchaComponentDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: BaseReCaptchaComponentDirective, deps: [{ token: i0.Renderer2 }, { token: i0.NgZone }, { token: i0.Injector }, { token: ScriptService }], target: i0.ɵɵFactoryTarget.Directive });\r\n/** @nocollapse */ BaseReCaptchaComponentDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.4\", type: BaseReCaptchaComponentDirective, inputs: { siteKey: \"siteKey\", useGlobalDomain: \"useGlobalDomain\", useEnterprise: \"useEnterprise\", type: \"type\", hl: \"hl\", tabIndex: \"tabIndex\" }, outputs: { success: \"success\", load: \"load\", reset: \"reset\", ready: \"ready\", error: \"error\", expire: \"expire\" }, usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: BaseReCaptchaComponentDirective, decorators: [{\r\n            type: Directive\r\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.NgZone }, { type: i0.Injector }, { type: ScriptService }]; }, propDecorators: { siteKey: [{\r\n                type: Input\r\n            }], useGlobalDomain: [{\r\n                type: Input\r\n            }], useEnterprise: [{\r\n                type: Input\r\n            }], type: [{\r\n                type: Input\r\n            }], hl: [{\r\n                type: Input\r\n            }], tabIndex: [{\r\n                type: Input\r\n            }], success: [{\r\n                type: Output\r\n            }], load: [{\r\n                type: Output\r\n            }], reset: [{\r\n                type: Output\r\n            }], ready: [{\r\n                type: Output\r\n            }], error: [{\r\n                type: Output\r\n            }], expire: [{\r\n                type: Output\r\n            }] } });\n\nvar ReCaptchaType;\r\n(function (ReCaptchaType) {\r\n    ReCaptchaType[ReCaptchaType[\"InvisibleReCaptcha\"] = 0] = \"InvisibleReCaptcha\";\r\n    ReCaptchaType[ReCaptchaType[\"ReCaptcha2\"] = 1] = \"ReCaptcha2\";\r\n})(ReCaptchaType || (ReCaptchaType = {}));\n\nclass InvisibleReCaptchaComponent extends BaseReCaptchaComponentDirective {\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        super(renderer, zone, injector, scriptService);\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * This size representing invisible captcha\r\n         */\r\n        this.size = 'invisible';\r\n        /**\r\n         * Theme\r\n         */\r\n        this.theme = 'light';\r\n        /**\r\n         * Badge\r\n         */\r\n        this.badge = 'bottomright';\r\n        this.recaptchaType = ReCaptchaType.InvisibleReCaptcha;\r\n    }\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n    /**\r\n     * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n     */\r\n    execute() {\r\n        // execute captcha\r\n        this.zone.runOutsideAngular(() => this.reCaptchaApi.execute(this.captchaId));\r\n    }\r\n    captchaSpecificSetup() {\r\n    }\r\n    /**\r\n    * Gets reCaptcha properties\r\n    */\r\n    getCaptchaProperties() {\r\n        return {\r\n            'sitekey': this.siteKey,\r\n            'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n            'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n            'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n            'badge': this.badge,\r\n            'type': this.type,\r\n            'tabindex': this.tabIndex,\r\n            'size': this.size,\r\n            'theme': this.theme\r\n        };\r\n    }\r\n}\r\n/** @nocollapse */ InvisibleReCaptchaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: InvisibleReCaptchaComponent, deps: [{ token: i0.Renderer2 }, { token: i0.NgZone }, { token: i0.Injector }, { token: ScriptService }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ InvisibleReCaptchaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.4\", type: InvisibleReCaptchaComponent, selector: \"ngx-invisible-recaptcha\", inputs: { theme: \"theme\", badge: \"badge\" }, providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef((() => InvisibleReCaptchaComponent)),\r\n            multi: true,\r\n        }\r\n    ], viewQueries: [{ propertyName: \"captchaWrapperElem\", first: true, predicate: [\"captchaWrapperElem\"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `\r\n  <div #captchaWrapperElem></div>`, isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: InvisibleReCaptchaComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-invisible-recaptcha',\r\n                    template: `\r\n  <div #captchaWrapperElem></div>`,\r\n                    providers: [\r\n                        {\r\n                            provide: NG_VALUE_ACCESSOR,\r\n                            useExisting: forwardRef((() => InvisibleReCaptchaComponent)),\r\n                            multi: true,\r\n                        }\r\n                    ]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.NgZone }, { type: i0.Injector }, { type: ScriptService }]; }, propDecorators: { theme: [{\r\n                type: Input\r\n            }], badge: [{\r\n                type: Input\r\n            }], captchaWrapperElem: [{\r\n                type: ViewChild,\r\n                args: ['captchaWrapperElem', { static: false }]\r\n            }] } });\n\nclass ReCaptcha2Component extends BaseReCaptchaComponentDirective {\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        super(renderer, zone, injector, scriptService);\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n        * Name of the global expire callback\r\n        */\r\n        this.windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\r\n        /**\r\n        * Name of the global error callback\r\n        */\r\n        this.windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\r\n        /**\r\n         * Theme\r\n         */\r\n        this.theme = 'light';\r\n        /**\r\n        * Size\r\n        */\r\n        this.size = 'normal';\r\n        this.recaptchaType = ReCaptchaType.ReCaptcha2;\r\n    }\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n    ngOnDestroy() {\r\n        window[this.windowOnErrorCallbackProperty] = {};\r\n        window[this.windowOnExpireCallbackProperty] = {};\r\n    }\r\n    captchaSpecificSetup() {\r\n        this.registerCallbacks();\r\n    }\r\n    /**\r\n     * Gets reCaptcha properties\r\n    */\r\n    getCaptchaProperties() {\r\n        return {\r\n            'sitekey': this.siteKey,\r\n            'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n            'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n            'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n            'theme': this.theme,\r\n            'type': this.type,\r\n            'size': this.size,\r\n            'tabindex': this.tabIndex\r\n        };\r\n    }\r\n    /**\r\n     * Registers global callbacks\r\n    */\r\n    registerCallbacks() {\r\n        window[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\r\n        window[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\r\n    }\r\n}\r\n/** @nocollapse */ ReCaptcha2Component.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ReCaptcha2Component, deps: [{ token: i0.Renderer2 }, { token: i0.NgZone }, { token: i0.Injector }, { token: ScriptService }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ ReCaptcha2Component.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.4\", type: ReCaptcha2Component, selector: \"ngx-recaptcha2\", inputs: { theme: \"theme\", size: \"size\" }, providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef((() => ReCaptcha2Component)),\r\n            multi: true,\r\n        }\r\n    ], viewQueries: [{ propertyName: \"captchaWrapperElem\", first: true, predicate: [\"captchaWrapperElem\"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `\r\n  <div #captchaWrapperElem></div>`, isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ReCaptcha2Component, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-recaptcha2',\r\n                    template: `\r\n  <div #captchaWrapperElem></div>`,\r\n                    providers: [\r\n                        {\r\n                            provide: NG_VALUE_ACCESSOR,\r\n                            useExisting: forwardRef((() => ReCaptcha2Component)),\r\n                            multi: true,\r\n                        }\r\n                    ]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.NgZone }, { type: i0.Injector }, { type: ScriptService }]; }, propDecorators: { theme: [{\r\n                type: Input\r\n            }], size: [{\r\n                type: Input\r\n            }], captchaWrapperElem: [{\r\n                type: ViewChild,\r\n                args: ['captchaWrapperElem', { static: false }]\r\n            }] } });\n\nclass ReCaptchaV3Service {\r\n    constructor(scriptService, zone) {\r\n        this.scriptService = scriptService;\r\n        this.zone = zone;\r\n    }\r\n    /**\r\n     * Executes reCaptcha v3/Enterprise with given action and passes token via callback. You need to verify\r\n     * this callback in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     * For enterprise see https://cloud.google.com/recaptcha-enterprise/docs\r\n     *\r\n     * @param siteKey Site key found in your google admin panel\r\n     * @param action Action to log\r\n     * @param callback Callback function to to handle token\r\n     * @param config Optional configuration like useGlobalDomain to be provided\r\n     * @param errorCallback Optional Callback function to handle errors\r\n     */\r\n    execute(siteKey, action, callback, config, errorCallback) {\r\n        this.executeAsPromise(siteKey, action, config)\r\n            .then(callback)\r\n            .catch((error) => errorCallback ? errorCallback(error) : console.error(error));\r\n    }\r\n    /**\r\n     * Executes reCaptcha v3/Enterprise with given action and returns token via Promise. You need to verify\r\n     * this token in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     * For enterprise see https://cloud.google.com/recaptcha-enterprise/docs\r\n     *\r\n     * @param siteKey Site key found in your google admin panel\r\n     * @param action Action to log\r\n     * @param config Optional configuration like useGlobalDomain to be provided\r\n     */\r\n    executeAsPromise(siteKey, action, config) {\r\n        return new Promise((resolve, reject) => {\r\n            const configuration = config || {};\r\n            const onRegister = (grecaptcha) => {\r\n                this.zone.runOutsideAngular(() => {\r\n                    try {\r\n                        grecaptcha\r\n                            .execute(siteKey, { action })\r\n                            .then((token) => this.zone.run(() => resolve(token)));\r\n                    }\r\n                    catch (error) {\r\n                        reject(error);\r\n                    }\r\n                });\r\n            };\r\n            this.scriptService.registerCaptchaScript(configuration, siteKey, onRegister);\r\n        });\r\n    }\r\n}\r\n/** @nocollapse */ ReCaptchaV3Service.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ReCaptchaV3Service, deps: [{ token: ScriptService }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ ReCaptchaV3Service.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ReCaptchaV3Service, providedIn: \"root\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ReCaptchaV3Service, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: \"root\",\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: ScriptService }, { type: i0.NgZone }]; } });\n\nclass NgxCaptchaModule {\r\n}\r\n/** @nocollapse */ NgxCaptchaModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgxCaptchaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgxCaptchaModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.4\", ngImport: i0, type: NgxCaptchaModule, declarations: [ReCaptcha2Component,\r\n        InvisibleReCaptchaComponent], imports: [CommonModule], exports: [ReCaptcha2Component,\r\n        InvisibleReCaptchaComponent] });\r\n/** @nocollapse */ NgxCaptchaModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgxCaptchaModule, providers: [\r\n        ScriptService,\r\n        ReCaptchaV3Service\r\n    ], imports: [CommonModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgxCaptchaModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    declarations: [\r\n                        ReCaptcha2Component,\r\n                        InvisibleReCaptchaComponent\r\n                    ],\r\n                    providers: [\r\n                        ScriptService,\r\n                        ReCaptchaV3Service\r\n                    ],\r\n                    exports: [\r\n                        ReCaptcha2Component,\r\n                        InvisibleReCaptchaComponent\r\n                    ]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { BaseReCaptchaComponentDirective, InvisibleReCaptchaComponent, NgxCaptchaModule, ReCaptcha2Component, ReCaptchaType, ReCaptchaV3Service, ScriptService };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}